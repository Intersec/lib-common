/***************************************************************************/
/*                                                                         */
/* Copyright 2020 INTERSEC SA                                              */
/*                                                                         */
/* Licensed under the Apache License, Version 2.0 (the "License");         */
/* you may not use this file except in compliance with the License.        */
/* You may obtain a copy of the License at                                 */
/*                                                                         */
/*     http://www.apache.org/licenses/LICENSE-2.0                          */
/*                                                                         */
/* Unless required by applicable law or agreed to in writing, software     */
/* distributed under the License is distributed on an "AS IS" BASIS,       */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.*/
/* See the License for the specific language governing permissions and     */
/* limitations under the License.                                          */
/*                                                                         */
/***************************************************************************/

package yaml;

/* {{{ Serialized data */

/** Value of a YAML scalar. */
union ScalarValue {
    string s;
    double d;
    ulong u;
    long i;
    bool b;
    void nil;
    bytes data;
};

/** Value of a YAML sequence. */
struct SeqValue {
    /** List of datas stored in the sequence. */
    Data[] datas;
};

/** Value of a YAML object. */
struct ObjValue {
    /** List of key-value mappings stored in the object. */
    KeyData[] fields;
};

union DataValue {
    ScalarValue scalar;
    SeqValue seq;
    ObjValue obj;
};

/** Serialized YAML data. */
struct Data {
    /** Value of the data. */
    DataValue value;

    /** Optional tag. */
    string? tag;
};

/** Key-Value pair */
struct KeyData {
    string key;
    Data data;
};

/* }}} */
/* {{{ Template presentation */

struct PresentationTemplate {
    /** This is the original value of the template, before any substitution.
     *
     * \warning The node may have been modified multiple times if it contains
     * multiple arguments, or it may be partial. This field contains the
     * original string, and not any partial substitution done afterwards.
     */
    string originalValue;

    /** Bitmap of escaped characters.
     *
     * If set, the template contains both variables and escaped '$'
     * characters. To distinguish the two, a bitmap is used, where 1 indicates
     * that a '$' is a variable, and 0 indicates a raw '$' character.
     */
    ubyte[] variablesBitmap;
};

/* }}} */
/* {{{ Node presentation */

/* Presentation details applied to a specific node.
 *
 * A node can be either:
 *   * a YAML data (a scalar, an object or a sequence).
 *   * the key of a field of a YAML object.
 *   * the sequence indicator of an element of a YAML sequence.
 */
struct PresentationNode {
    /** Comments prefixed before the node.
     *
     * For example:
     *
     * a:
     *   # Comment
     *   # Second line
     *   b: ~
     *
     * ["Comment", "Second line"] are the prefix comments for "a.b".
     */
    string[] prefixComments;

    /** Comment inlined after the node.
     *
     * The comment is present at the end of the line where the node
     * is declared. For example:
     *
     * a:
     *   b: ~ # Comment
     *
     * "Comment" is an inline comment for "a.b".
     */
    string? inlineComment;

    /** Empty lines before the data.
     *
     * Often used to space out blocks and make the document more readable:
     *
     * ---
     * a: 2
     *
     * b: 3
     * ---
     *
     * ".b" will have one empty line in its presentation node.
     *
     * WARNING: empty lines are capped to 2.
     */
    ubyte emptyLines = 0;

    /** The data is packed in flow syntax */
    bool flowMode = false;

    /** The data was quoted.
     *
     * This only makes sense for string scalars. If true, the string will
     * be quoted when packed. If false, the string will still be quoted if it
     * contains characters that requires it.
     */
    bool quoted = false;

    /** The null data was empty.
     *
     * This only makes sense for null scalars. If true, the scalar will be
     * packed as "", otherwise as "~".
     */
    bool emptyNull = false;

    /** If set, the node was parsed from an included file. */
    PresentationInclude? included;

    /** If set, this contains the value of the node pre-templating.
     *
     * If set, this node was modified through variables, and this field
     * contains the original value of the node.
     *
     * \warning The node may have been modified multiple times if it contains
     * multiple arguments, or it may be partial. This field contains the
     * original string, and not any partial substitution done afterwards.
     */
    PresentationTemplate? tpl;

    /** If set, the object contains a merge key.
     *
     * This is only valid for objects.
     */
    PresentationMergeKey? mergeKey;
};

/* }}} */
/* {{{ Document presentation */

struct PresentationNodeMapping {
    /** Path the node in the document.
     *
     * The format for the path is the following:
     *  * for the data itself: '!'
     *  * for a key: .<key>
     *  * for a seq indicator: [idx]
     * So for example:
     *
     * .a.foo[2].b  => "a: { foo: [_, _, b: _] }"
     *                                   ^
     * .a.foo[2].b! => "a: { foo: [_, _, b: _] }"
     *                                      ^
     * .a.foo!      => "a: { foo: [_, _, b: _] }"
     *                       ^
     * [0].b[2][0].c! => "- b: [_, _, [c: _] ]"
     *                                    ^
     *
     * Some presentation data could be matched with either the complex data or
     * its first element, for example:
     *
     * # A
     * - 1
     *
     * The comment can be associated with the seq data itself, or with its
     * first key.
     * In practice, this is not an issue, as the parsing is stable, and the
     * packing will handle this correctly.
     */
    string path;

    /** Presentation details for this node. */
    PresentationNode node;
};

/** Description of the presentation of a whole document */
struct DocumentPresentation {
    /** Presentation details by nodes in the document. */
    PresentationNodeMapping[] mappings;
};

/* }}} */
/* {{{ Include presentation */

/** Details about an '!include' */
struct PresentationInclude {
    /** Include path.
     *
     * This is the exact path that was specified in the !include:
     *
     * !include <str> # path is equal to <str>
     */
    string path;

    /** Is the include raw. */
    bool raw;

    /** Presentation of the !include element.
     *
     * Presentation associated with the '!include' node.
     */
    DocumentPresentation includePresentation;

    /** Presentation details of the included file. */
    DocumentPresentation documentPresentation;

    PresentationOverride? override;

    PresentationVariableSettings? variables;
};

/* }}} */
/* {{{ Override presentation */

/** Mapping from a path to a overridden value. */
struct PresentationOverrideNode {
    /** Path from the root of the override data */
    string path;

    /** Original data that was replaced by the override.
     *
     * If unset, there was no original data, indicating the data was added
     * by the override, and not replaced.
     *
     * Technically:
     *  * If the path ends with a '!', we are referencing a YAML data that
     *    was already present in the original AST, so originalData should be
     *    set.
     *  * If the path ends with a '[%d]' or a '.%s', we are referencing a seq
     *    element or an object key itself and not its value, which would only
     *    be valid for an addition, so originalData should be unset.
     */
    Data? originalData;
};

/** Description of an override data.
 *
 * The presentation of an override stores the information that is needed to
 * properly recreate the override on packing.
 *
 * It stores the override data in a flat way, associating paths to data that
 * was replaced in the original AST.
 *
 * For example, with:
 *
 * foo.yml:
 * a: { b: 1 }
 *
 * when parsing:
 *
 * !include foo.yml
 * a: { b: 2 }
 *
 * We will store:
 *  nodes: [{
 *    path: ".a.b!",
 *    originalData: {
 *      "value": { "scalar": { "u": 1 } }
 *    }
 *  }]
 */
struct PresentationOverride {
    /** List of overridden values, with their associated paths. */
    PresentationOverrideNode[] nodes;
};

/* }}} */
/* {{{ Variables presentation */

/** Binding of a value on a variable. */
struct PresentationVariableBinding {
    /** Name of the variable bound. */
    string varName;

    /** Value of the variable.
     *
     * This is not set if the value was not a scalar (i.e., the variable
     * was used to insert data in the AST, and not injected into strings).
     *
     * This is useful to properly repack bindings that were merged into
     * strings. It is used to detect if the strings has not changed, and if
     * those values can thus be re-used.
     */
    string? value;
};

/** Description of a variable settings data.
 *
 * The presentation of a variable settings stores the information that is
 * needed to properly recreate the nodes settings the varialbes on packing.
 *
 * It stores the names of the variables set. Packing the inner AST with reuse
 * the original, pre-substitution values, and use them to deduce the variable
 * values.
 */
struct PresentationVariableSettings {
    /** Bindings contained in the settings data. */
    PresentationVariableBinding[] bindings;
};

/* }}} */
/* {{{ Merge key presentation */

/** Description of a key in an element of a merge key */
struct PresentationMergeKeyElemKey {
    /** Name of the key modified by the merge key element */
    string key;

    /** Original data that was replaced by the merge key element.
     *
     * If unset, there was no original data, indicating the data was added,
     * and not replaced.
     */
    Data? originalData;
};

/** Description of an element of a merge key */
struct PresentationMergeKeyElem {
    /** Details on keys modified by the element. */
    PresentationMergeKeyElemKey[] keys;
};

/** Description of a merge key.
 *
 * If a object used a merge key, it looks like this:
 *
 *  <<:
 *    - <data1>
 *    - <data2>
 *  key1: ...
 *  key2: ...
 *
 * As the keys specified after the merge key also are "merged" in the
 * resulting object, this is equivalent to:
 *
 *  <<:
 *    - <data1>
 *    - <data2>
 *    - key1: ...
 *      key2: ...
 *
 * Every data in the seq of the merge key is an override.
 */
struct PresentationMergeKey {
    /** Override details for every data in the merge key.
     *
     * In the previous example, that would be 3 elements:
     *  - <data1>
     *  - <data2>
     *  - key1: ...
     *    key2: ...
     */
    PresentationMergeKeyElem[] elements;

    /** Presentation of the data. */
    /* FIXME: should not be optional, but this causes a bug in pxcc which
     * blocks the iopy compilation... */
    DocumentPresentation? presentation;

    /** Whether the object only contains a single merge key.
     *
     * If true, all overrides are put in the merge key:
     *
     *  <<:
     *    - <data1>
     *    - <data2>
     *    - key1: ...
     *      key2: ...
     *
     * If false, the last override is inlined in the object:
     *
     *  <<:
     *    - <data1>
     *    - <data2>
     *  key1: ...
     *  key2: ...
     */
    bool hasOnlyMergeKey;
};

/* }}} */
