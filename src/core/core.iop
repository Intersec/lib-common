/***************************************************************************/
/*                                                                         */
/* Copyright 2022 INTERSEC SA                                              */
/*                                                                         */
/* Licensed under the Apache License, Version 2.0 (the "License");         */
/* you may not use this file except in compliance with the License.        */
/* You may obtain a copy of the License at                                 */
/*                                                                         */
/*     http://www.apache.org/licenses/LICENSE-2.0                          */
/*                                                                         */
/* Unless required by applicable law or agreed to in writing, software     */
/* distributed under the License is distributed on an "AS IS" BASIS,       */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.*/
/* See the License for the specific language governing permissions and     */
/* limitations under the License.                                          */
/*                                                                         */
/***************************************************************************/

package core;

/** List of supported log levels.
 */
enum LogLevel {
    EMERG   = 0, /**< system is unusable */
    ALERT   = 1, /**< action must be taken immediately */
    CRIT    = 2, /**< critical conditions */
    ERR     = 3, /**< error conditions */
    WARNING = 4, /**< warning conditions */
    NOTICE  = 5, /**< normal but significant condition */
    INFO    = 6, /**< informational */
    DEBUG   = 7, /**< debug-level messages */
    TRACE   = 8, /**< trace-level messages */

    INHERITS = -1, /**< inherits the level of the parent logger */
    DEFAULT  = -2, /**< use default configuration */
};

/** Configuration of a specific logger.
 */
struct LoggerConfiguration {
    /** Name of the logger to configure.
     */
    string fullName;

    /** Logging level.
     *
     * This will be the logging level for this logger and all inheriting
     * loggers that were not explicitly configured.
     */
    LogLevel level;

    /** Force the use of logging level for child loggers.
     *
     * If this flag is set, the level of that logger is propagated to all
     * child loggers that were not explicitly configured, even those that
     * were not supposed to inherit from that level.
     */
    bool forceAll = false;

    /** If true, log handler is called, but default one does nothing. */
    bool isSilent = false;
};

/** Interface providing the basis for configuring and accessing
 *  the logging system.
 */
interface Log {
    setRootLevel
        in (LogLevel level, bool forceAll = false, bool isSilent = false)
        out (LogLevel level);

    resetRootLevel
        in void
        out (LogLevel level);

    setLoggerLevel
        in (string fullName, LogLevel level, bool forceAll = false,
            bool isSilent = false)
        out (LogLevel level);

    resetLoggerLevel
        in (string fullName)
        out (LogLevel level);

    listLoggers
        in (string? prefix)
        out (LoggerConfiguration[] loggers);
};

/** Configuration of the logging system.
 */
struct LogConfiguration {
    /** Root logging level.
     *
     * This will be the logging level for all the logger inherits from
     * root logging level and that were not configured to another value
     * separately.
     *
     * The default configuration is to enable TRACE in development builds,
     * and to enable only DEBUG in release builds.
     */
    LogLevel rootLevel = LOG_LEVEL_DEFAULT;

    /** Force the use of the root level.
     *
     * If this flag is set, the root level is propagated to all logger
     * that were not explicitly configured, even those that were not
     * supposed to inherit from the root level.
     */
    bool     forceAll = false;

    /** If true, log handler is called, but default one does nothing. */
    bool     isSilent = false;

    /** Independent configuration of specific loggers.
     *
     * This can be used to perform a fine-grained configuration of the
     * logging level of specific code modules.
     */
    LoggerConfiguration[] specific;
};

/** Configuration of a log_file_t.
 *
 * This class defines how a log file is opened, rotates, expires and is
 * compressed.
 */
class LogFileConfiguration {
    /** Log file max size before rotation (in bytes). */
    int maxSize = 512M;

    /** Log file max age before rotation (in seconds). */
    ulong maxTime = 1d;

    /** Maximum number of log files.
     *
     * <= 0 means no limit.
     */
    int maxFiles = 0;

    /** Maximum total size of the log files (in bytes).
     *
     * <= 0 means no limit.
     */
    long totalMaxSize = 1G;

    /** Activate log file compression. */
    bool compress = true;
};

/** Full network address.
 *
 * Addresses can be of the following forms:
 *
 * - "a.b.c.d:port": must be a valid ipv4 IP address.
 * - "[ipv6addr]:port": must be a valid ipv6 IP address.
 * - "fqdn.tld:port": must be a valid fully qualified domain name.
 *
 * The port must be strictly positive.
 */
@nonEmpty @(cfg:fullAddr, true)
typedef string FullAddr;

/** Network address.
 *
 * Same as \ref FullAddr except that the port can be omitted.
 */
@nonEmpty @(cfg:addr, true)
typedef string Addr;

/** Network port. */
@(cfg:port, true)
typedef int Port;

/** A certificate and its private key for TLS.
 *
 * Such files can be generated with the following command:
 *
 *   $ openssl req -newkey rsa:4096 -nodes -sha512 -x509 -days 3650
 *                 -nodes -out cert.pem -keyout priv-key.pem
 */
struct TlsCertAndKey {
    /** Contents of a certificate file.
     */
    bytes cert;

    /** Contents of a private key file.
     */
    bytes key;
};

/** TLS configuration.
 *
 * These should be stored in the platform keychain, if available, and
 * refered by their keyname. They may also be directly provided.
 */
union TlsCfg {
    /** A keyname refering a key from the platform keychain.
     */
    string keyname;

    /** Contents of SSL key and certificate.
     *
     * Certificate can be a standalone certificate (even if it is a link of a
     * chain) or a section of certificate chain.
     * If a chain certificate is used, private key has to correspond to the
     * lowest level certificate (cf HttpdCfg or HttpcCfg doc for more
     * explanation).
     */
    TlsCertAndKey data;
};

struct HttpdCfg {
    /** Address (host:port) to listen on */
    FullAddr bindAddr;
    /** Maximum size of the output buffer (in octets) */
    uint    outbufMaxSize    = 32 << 20;
    /** Maximum number of pending incoming queries */
    ushort  pipelineDepth    = 32;
    /** Maximum time of inactivity before connection closing (in ms) */
    uint    noactDelay       = 30 * 1000;
    /** Maximum number of incoming queries handled into a connection life */
    uint    maxQueries       = 1024;
    /** Maximum number of inbound connections */
    uint    maxConnsIn       = 1000;
    /** Amount of data buffered by the body parser before flushing */
    uint    onDataThreshold  = 16 << 10;
    /** Maximum line length in headers */
    uint    headerLineMax    = 1024;
    /** Maximum total size for headers */
    uint    headerSizeMax    = 64 << 10;
    /** TLS data: certificate and private key.
     *
     * Certificate can be a standalone certificate (even if it is a link of a
     * chain) or a section of certificate chain.
     * The validation of the certificate will depend on the contents of this
     * certificate, the contents of the system SSL default paths and what's in
     * the client system.
     * If a chain certificate is used, private key has to correspond to the
     * lowest level certificate.
     *
     * Indeed, in order to validate a certificate, a CA authority is required.
     * For example, if a certificate is generated from another one, the
     * parent certificate will be your certification.
     * There are default paths where SSL stores certificates (see 'OPENSSLDIR'
     * on 'openssl version -a' command).
     *
     * All the contents of the certificate will be used for the validation. If
     * all the chain is in it, only the root certification will be necessary
     * on the client side. But, if just a part of the chain is in your
     * certificate with all other parts that are in the server SSL default
     * paths, then all the chain will be sent to the client again.
     * If one link of your chain missed, only the certificate will be sent and
     * the client system needs to have other links to validate the
     * certificate.
     *
     * For example, lets say you have this chain certificate A -> B -> C,
     * with B signed by A and C signed y B.
     * If the certificate contains A, B and C, then only A is necessary on
     * the client side (all the chain will be sent to the client).
     * If the certificate contains only C, but A and B are stored in the
     * system SSL default paths, then only A is necessary on client side again
     * (all the chain will be sent to the client).
     * If the certificate contains only C, and only A is stored in the system
     * SSL default paths, then A and B are necessary on the client side
     * (just C will be sent to the client).
     */
    TlsCfg? tls;
};

struct HttpcCfg {
    /** Maximum number of pending outgoing queries */
    ushort  pipelineDepth    = 32;
    /** Maximum time of inactivity before connection closing (in ms) */
    uint    noactDelay       = 30 * 1000;
    /** Maximum number of outgoing queries handled into a connection life */
    uint    maxQueries       = 1024;
    /** Amount of data buffered by the body parser before flushing */
    uint    onDataThreshold  = 16 << 10;
    /** Maximum line length in headers */
    uint    headerLineMax    = 1024;
    /** Maximum total size for headers */
    uint    headerSizeMax    = 64 << 10;

    /** TLS */
    bool    tlsOn            = false;

    /** Contents of a trusted certificate file.
     *
     * In order to validate a certificate, a CA authority is required.
     * For example, if a certificate is generated from another one, the
     * parent certificate will be your certification.
     *
     * There are default paths where SSL stores the certificates
     * (see 'OPENSSLDIR' on 'openssl version -a' command).
     *
     * If tlsCert is not set, all certificates present on these default paths
     * will be used to validate the server certificate.
     * If this field has a value, only this certificate will be used to
     * validate the server certificate.
     *
     * If a chain of certificates is used by the server, it is necessary to
     * have all certificates (in this field if set or in your defaults paths;
     * see previous paragraph) from the parent certificate of the one used in
     * your server to the root of the chain.
     *
     * For example, lets say we have this chain A -> B -> C, with B
     * certificate signed by A and C signed by B.
     * If only C is given on server side (and A and B unknown even on SSL
     * default server paths), then A and B will be necessary on client side
     * (either in tlsCert field or in default paths) (only C will be
     * given to the client during handshake).
     * But, if B is also given on server side (or B is stored on SSL default
     * server paths), then, just A will be necessary (because B and C will be
     * given to the client during handshake).
     */
    string? tlsCert;

    /** Certificate and private key of client.
     *
     * This is required to support mTLS. In mTLS, the server will request
     * client certificate and validate it.
     * If the client does not provide a valid certificate, the connection
     * will be refused.
     * The client certificate must be signed by a CA trusted by the server.
     */
    TlsCfg? tlsClient;

   /** Use the http2 transport to send requests.
    *
    * If \p tlsOn, h2 protocol is negotiated through the ALPN extension. */
   bool    useHttp2            = false;

   /* TODO:
   /** Fallback to http1.1 protocol if \p use_http2 is true.
    *  Relevant only if \p tlsOn is true.
    bool    fallbackToHttp1    = false;
    */
};

enum IopHttpMethod {
    /* rfc 2616: §5.1.1: Method */
    /* XXX be careful, this struct is correlated with http_method_t
    in http.h */
    OPTIONS = 0,
    GET     = 1,
    HEAD    = 2,
    POST    = 3,
    PUT     = 4,
    DELETE  = 5,
    TRACE   = 6,
    CONNECT = 7,
};

@ctype(http_code__t)
enum HttpCode {
    /*-- Informational --*/
    CONTINUE                 = 100,
    SWITCHING_PROTOCOL       = 101,

    /*-- Success --*/
    OK                       = 200,
    CREATED                  = 201,
    ACCEPTED                 = 202,
    NON_AUTHORITATIVE        = 203,
    NO_CONTENT               = 204,
    RESET_CONTENT            = 205,
    PARTIAL_CONTENT          = 206,

    /*-- Redirection --*/
    MULTIPLE_CHOICES         = 300,
    MOVED_PERMANENTLY        = 301,
    FOUND                    = 302,
    SEE_OTHER                = 303,
    NOT_MODIFIED             = 304,
    USE_PROXY                = 305,
    TEMPORARY_REDIRECT       = 307,

    /*-- Client errors --*/
    BAD_REQUEST              = 400,
    UNAUTHORIZED             = 401,
    PAYMENT_REQUIRED         = 402,
    FORBIDDEN                = 403,
    NOT_FOUND                = 404,
    METHOD_NOT_ALLOWED       = 405,
    NOT_ACCEPTABLE           = 406,
    PROXY_AUTH_REQUIRED      = 407,
    REQUEST_TIMEOUT          = 408,
    CONFLICT                 = 409,
    GONE                     = 410,
    LENGTH_REQUIRED          = 411,
    PRECONDITION_FAILED      = 412,
    REQUEST_ENTITY_TOO_LARGE = 413,
    REQUEST_URI_TOO_LARGE    = 414,
    UNSUPPORTED_MEDIA_TYPE   = 415,
    REQUEST_RANGE_UNSAT      = 416,
    EXPECTATION_FAILED       = 417,
    /* the status 429 was introduced in rfc 6585 $4 */
    TOO_MANY_REQUESTS        = 429,

    /*-- Server errors --*/
    INTERNAL_SERVER_ERROR    = 500,
    NOT_IMPLEMENTED          = 501,
    BAD_GATEWAY              = 502,
    SERVICE_UNAVAILABLE      = 503,
    GATEWAY_TIMEOUT          = 504,
    VERSION_NOT_SUPPORTED    = 505,
};

/** Sub-file (un)packed with the IOP-Json @include feature. */
@ctype(iop_json_subfile__t)
struct IopJsonSubfile {
    /** Path to the (un)packed json.
     *
     * On unpack, the returned path is relative to the main file.
     * On pack, the path can be either absolute or relative to the main file.
     */
    string filePath;

    /** IOP path from the main (un)packed object. */
    string iopPath;
};

/** Module exporting interfaces provided by lib-common.
 */
module Core {
16384:
    Log log;
};
