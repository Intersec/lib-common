/***************************************************************************/
/*                                                                         */
/* Copyright 2020 INTERSEC SA                                              */
/*                                                                         */
/* Licensed under the Apache License, Version 2.0 (the "License");         */
/* you may not use this file except in compliance with the License.        */
/* You may obtain a copy of the License at                                 */
/*                                                                         */
/*     http://www.apache.org/licenses/LICENSE-2.0                          */
/*                                                                         */
/* Unless required by applicable law or agreed to in writing, software     */
/* distributed under the License is distributed on an "AS IS" BASIS,       */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.*/
/* See the License for the specific language governing permissions and     */
/* limitations under the License.                                          */
/*                                                                         */
/***************************************************************************/

#include <sys/ioctl.h>
#include <sys/resource.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <netinet/tcp.h>
#include <termios.h>
#include <sys/wait.h>

#include <lib-common/unix.h>
#include <lib-common/datetime.h>
#include <lib-common/container.h>
#include <lib-common/sort.h>
#include <lib-common/net.h>
#include <lib-common/thr.h>

/** Create a subdirectory path as mkdir -p.
 *
 * @param dfd  parent directory (see man 2 mkdirat)
 * @param path the path within the parent directory
 * @param mode initial mode of the directory
 *
 * @return 0 if directory exists,
 * @return 1 if directory was created
 * @return -1 in case an error occurred.
 */
int mkdirat_p(int dfd, const char *dir, mode_t mode)
{
    char path[PATH_MAX + 1], *p;
    int atoms = 0, res;

    pstrcpy(path, sizeof(path) - 1, dir);
    path_simplify(path);
    p = path + strlen(path);

    for (;;) {
        struct stat st;

        p = memrchr(path, '/', p - path) ?: path;
        if (stat(path, &st) == 0) {
            if (S_ISDIR(st.st_mode)) {
                if (atoms == 0)
                    return 0;
                break;
            }
            errno = ENOTDIR;
            return -1;
        }
        if (errno != ENOENT)
            return -1;
        atoms++;
        if (p == path)
            goto make_everything;
        *p = '\0';
    }

    assert (atoms);
    for (;;) {
        p += strlen(p);
        *p = '/';
      make_everything:
        if (mkdirat(dfd, path, mode) < 0) {
            if (errno != EEXIST)
                return -1;
            res = 0;
        } else {
            res = 1;
        }
        if (--atoms == 0)
            return res;
    }
}

/** Create a directory path as mkdir -p
 *
 * @param dir   directory to create
 * @param mode  initial mode of directory, and parent directories if required
 *
 * @return 0 if directory exists,
 * @return 1 if directory was created
 * @return -1 in case an error occurred.
 */
int mkdir_p(const char *dir, mode_t mode)
{
    return mkdirat_p(AT_FDCWD, dir, mode);
}


/** Retrieve time of last modification
 *
 * @param filename  relative or absolute path
 * @param t         time is returned in this pointer
 *
 * @return 0 if successful
 * @return -1 on error (errno is positioned according to stat)
 */
int get_mtime(const char *filename, time_t *t)
{
    struct stat st;
    if (!t || stat(filename, &st)) {
        return 1;
    }
    *t = st.st_mtime;
    return 0;
}

static off_t fcopy(int fdin, const struct stat *stin, int fdout)
{
#define BUF_SIZE  (8 << 20) /* 8MB */
    t_scope;
    int nread;
    byte *buf = t_new_raw(byte, BUF_SIZE);
    off_t total = 0;

    for (;;) {
        nread = read(fdin, buf, BUF_SIZE);
        if (nread == 0)
            break;
        if (nread < 0) {
            if (ERR_RW_RETRIABLE(errno))
                continue;
            goto error;
        }
        if (xwrite(fdout, buf, nread) < 0) {
            goto error;
        }
        total += nread;
    }
#undef BUF_SIZE

    if (unlikely(total != stin->st_size)) {
        assert (false);
        errno = EIO;
        goto error;
    }

#if defined(__linux__)
    /* copying file times */
    /* OG: should copy full precision times if possible.
       Since kernel 2.5.48, the stat structure supports nanosecond  resolution
       for the three file timestamp fields.  Glibc exposes the nanosecond com-
       ponent of each field using names either of the form st_atim.tv_nsec, if
       the  _BSD_SOURCE  or  _SVID_SOURCE feature test macro is defined, or of
       the form st_atimensec, if neither of these macros is defined.  On  file
       systems  that  do  not  support sub-second timestamps, these nanosecond
       fields are returned with the value 0.
     */
    {
        struct timeval tvp[2];

        tvp[0] = (struct timeval) { .tv_sec = stin->st_atime,
                                    .tv_usec = stin->st_atimensec / 1000 };
        tvp[1] = (struct timeval) { .tv_sec = stin->st_mtime,
                                    .tv_usec = stin->st_mtimensec / 1000 };
        futimes(fdout, tvp);
    }
#endif

    return total;

  error:
    return -1;
}

/** Copy file pathin to pathout. If pathout already exists, it will
 * be overwritten.
 *
 * Note: Use the same mode bits as the input file.
 * @param  pathin  file to copy
 * @param  pathout destination (created if not exist, else overwritten)
 *
 * @return -1 on error
 * @return n  number of bytes copied
 */
off_t filecopy(const char *pathin, const char *pathout)
{
/* OG: since this function returns the number of bytes copied, the
 * return type should be off_t.
 */
    int fdin = -1, fdout = -1;
    struct stat st;
    off_t total = -1;

    fdin = open(pathin, O_RDONLY);
    if (fdin < 0) {
        goto end;
    }
    if (fstat(fdin, &st)) {
        goto end;
    }

    /* OG: this will not work if the source file is not writeable ;-) */
    /* OG: should test if source and destination files are the same
     * file before truncating destination file ;-) */
    fdout = open(pathout, O_WRONLY | O_CREAT | O_TRUNC, st.st_mode);
    if (fdout < 0) {
        goto end;
    }

    total = fcopy(fdin, &st, fdout);

  end:
    PROTECT_ERRNO(p_close(&fdin));
    PROTECT_ERRNO(p_close(&fdout));

    return total;
}

/** Copy file from a directory descriptor to another. If the file already
 * exists in the destination directory, it will be overwritten.
 *
 * Note: Use the same mode bits as the input file.
 * @param  dfd_src    source directory descriptor.
 * @param  name_src   the file to copy.
 * @param  dfd_dst    destination directory descriptor.
 * @param  name_dst   the new resulting file.
 *
 * @return -1 on error
 * @return n  number of bytes copied
 */
off_t filecopyat(int dfd_src, const char* name_src,
                 int dfd_dst, const char* name_dst)
{
    int fd_src = -1, fd_dst = -1;
    struct stat st;
    off_t total;

    fd_src = openat(dfd_src, name_src, O_RDONLY);
    if (fd_src < 0)
        goto error;

    if (fstat(fd_src, &st))
        goto error;

    fd_dst = openat(dfd_dst, name_dst, O_WRONLY | O_CREAT | O_TRUNC,
                    st.st_mode);
    if (fd_dst < 0)
        goto error;

    total = fcopy(fd_src, &st, fd_dst);
    close(fd_src);
    close(fd_dst);
    return total;

  error:
    p_close(&fd_src);
    p_close(&fd_dst);

    /* OG: destination file should be removed upon error ? */
    return -1;
}

/** Lock files and test locks
 *
 * Example: p_lockf(fd, O_RDONLY, 0)   Places a read lock on the whole file
 *
 * Note: - to unlock, use p_unlockf
 *       - See the lockf(3) or fcntl(2)
 *
 * @param  fd    opened file
 * @param  mode  lock mode (O_RDONLY, O_RDWR, O_WRONLY)
 * @param  cmd   One of F_LOCK, F_TLOCK or F_TEST  (see fcntl(2))
 * @param  start Start of the region of the file on which the lock applies
 * @param  len   Length of the region of the file on which the lock applies
 *
 * @return On success, zero is returned. On error, -1 is returned, and errno
 *         is set appropriately.
 */
int p_lockf(int fd, int mode, int cmd, off_t start, off_t len)
{
    struct flock lock = {
        .l_type   = O_ISWRITE(mode) ? F_WRLCK : F_RDLCK,
        .l_whence = SEEK_SET,
        .l_start  = start,
        .l_len    = len,
    };

    switch (cmd) {
      case F_LOCK:
        cmd = F_SETLKW;
        break;

      case F_TLOCK:
        cmd = F_SETLK;
        break;

      case F_TEST:
        cmd = F_GETLK;
        break;

      default:
        errno = EINVAL;
        return -1;
    }

    RETHROW(fcntl(fd, cmd, &lock));
    if (cmd == F_GETLK) {
        if (lock.l_type == F_UNLCK) {
            return 0;
        }
        errno = EAGAIN;
        return -1;
    }

    return 0;
}

/** Unlock files
 *
 * Example: p_unlockf(fd, 0, 0)    Unlocks the whole file
 *
 * @param  fd    opened file
 * @param  start Start of the region of the file to unlock
 * @param  len   Length of the region of the file to unlock
 *
 * @return On success, zero is returned. On error, -1 is returned, and errno
 *         is set appropriately.
 */
int p_unlockf(int fd, off_t start, off_t len)
{
    struct flock lock = {
        .l_type   = F_UNLCK,
        .l_whence = SEEK_SET,
        .l_start  = start,
        .l_len    = len,
    };
    return fcntl(fd, F_SETLK, &lock);
}

int lockdir(int dfd, dir_lock_t *dlock)
{
    *dlock        = DIR_LOCK_INIT_V;
    dlock->lockfd = RETHROW(openat(dfd, ".lock", O_WRONLY | O_CREAT,
                                   S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH));

    if (p_lockf(dlock->lockfd, O_WRONLY, F_TLOCK, 0, 0) < 0) {
        PROTECT_ERRNO(p_close(&dlock->lockfd));
        return -1;
    }

    dlock->dfd = dup(dfd);
    return 0;
}

void unlockdir(dir_lock_t *dlock)
{
    unlinkat(dlock->dfd, ".lock", 0);

    /* XXX: The file gets unlocked after close() */
    p_close(&dlock->lockfd);
    p_close(&dlock->dfd);
}

int tmpfd(void)
{
    char path[PATH_MAX] = "/tmp/XXXXXX";
    mode_t mask = umask(0177);
    int fd = mkstemp(path);
    umask(mask);
    RETHROW(fd);
    unlink(path);
    return fd;
}

/*{{{ list_dir */

static int list_dir_set_dirent_type(const char *path, unsigned flags,
                                    struct stat *stat_buf, linux_dirent_t *de)
{
    if (flags & LIST_DIR_FOLLOW_SYMLINK) {
        RETHROW(stat(path, stat_buf));
    } else {
        if (D_TYPE(de) != DT_UNKNOWN) {
            return 0;
        }
        RETHROW(lstat(path, stat_buf));
    }

    if (S_ISDIR(stat_buf->st_mode)) {
        D_SET_TYPE(de, DT_DIR);
    } else
    if (S_ISREG(stat_buf->st_mode)) {
        D_SET_TYPE(de, DT_REG);
    } else
    if (S_ISCHR(stat_buf->st_mode)) {
        D_SET_TYPE(de, DT_CHR);
    } else
    if (S_ISBLK(stat_buf->st_mode)) {
        D_SET_TYPE(de, DT_BLK);
    } else
    if (S_ISLNK(stat_buf->st_mode)) {
        D_SET_TYPE(de, DT_LNK);
    } else
    if (S_ISFIFO(stat_buf->st_mode)) {
        D_SET_TYPE(de, DT_FIFO);
    } else
    if (S_ISSOCK(stat_buf->st_mode)) {
        D_SET_TYPE(de, DT_SOCK);
    } else {
        return -1;
    }

    return 0;
}

typedef struct st_file_t {
    dev_t st_dev;
    ino_t st_ino;
} st_file_t;

static inline uint32_t st_file_hash(const qhash_t *qh, const st_file_t *f)
{
    return mem_hash32(f, sizeof(*f));
}

static inline bool
st_file_equal(const qhash_t *qh, const st_file_t *f1, const st_file_t *f2)
{
    return (f1->st_dev == f2->st_dev) && (f1->st_ino == f2->st_ino);
}

qh_kvec_t(st_file, st_file_t, st_file_hash, st_file_equal);

static int __list_dir(const char *path, unsigned flags,
                      qh_t(st_file) *files_seen, on_file_b on_file);

static int list_dir_on_entry(const char *base, const char *path, unsigned flags,
                             qh_t(st_file) *files_seen, linux_dirent_t *de,
                             int *total, on_file_b on_file)
{
    int res;
    struct stat stat_buf;

    if (list_dir_set_dirent_type(path, flags, &stat_buf, de) < 0) {
        return 0;
    }

    if (flags & LIST_DIR_FOLLOW_SYMLINK) {
        st_file_t st_file;

        p_clear(&st_file, 1);
        st_file.st_dev = stat_buf.st_dev;
        st_file.st_ino = stat_buf.st_ino;

        if (qh_add(st_file, files_seen, &st_file) < 0) {
            /* This file was already seen, skip it. */
            return 0;
        }
    }

    if (D_TYPE(de) == DT_DIR && (flags & LIST_DIR_RECUR)) {
        res = __list_dir(path, flags, files_seen, on_file);
        if (res < 0) {
            return -1;
        }
        *total += res;
    }

    (*total)++;
    if (on_file) {
        res = on_file(base, de);
        if (res < 0) {
            return -1;
        }
    }
    return 0;
}
#if defined(__linux__)

static int __list_dir(const char *path, unsigned flags,
                      qh_t(st_file) *files_seen, on_file_b on_file)
{
#define LIST_DIR_BUF_SIZE   1024 * 1024 * 5
    /* XXX: do not use t_stack here to allow on_file owner to allocate memory
     *      in their own frame. */
    int nread, total = 0;
    int dfd = RETHROW(open(path, O_RDONLY | O_DIRECTORY));
    byte *buf = p_new_raw(byte, LIST_DIR_BUF_SIZE);
    int tmp_res;

    while ((nread = syscall(SYS_getdents, dfd, buf, LIST_DIR_BUF_SIZE)) > 0) {
        for (int i = 0; i < nread;) {
            linux_dirent_t *de = (linux_dirent_t *)(buf + i);
            char tmp_path[PATH_MAX];

            i += de->d_reclen;

            if (de->d_name[0] == '.' || de->d_ino == 0) {
                continue;
            }

            snprintf(tmp_path, sizeof(tmp_path), "%s/%s", path, de->d_name);
            tmp_res = list_dir_on_entry(path, tmp_path, flags, files_seen,
                                        de, &total, on_file);

            if (tmp_res < 0) {
                goto error;
            }
        }
    }

    p_delete(&buf);
    p_close(&dfd);
    return nread < 0 ? -1 : total;

  error:
    p_delete(&buf);
    p_close(&dfd);
    return tmp_res;

#undef LIST_DIR_BUF_SIZE
}

#else

static int __list_dir(const char *path, unsigned flags,
                      qh_t(st_file) *files_seen, on_file_b on_file)
{
    DIR *dir = RETHROW_PN(opendir(path));
    struct dirent *de;
    int res = 0;
    int total = 0;

    while ((de = readdir(dir))) {
        lstr_t name = LSTR_INIT(de->d_name, de->d_namlen);
        char tmp_path[PATH_MAX];

        if (lstr_equal(name, LSTR(".")) || lstr_equal(name, LSTR(".."))) {
            continue;
        }

        snprintf(tmp_path, sizeof(tmp_path), "%s/%*pM",
                 path, LSTR_FMT_ARG(name));

        res = list_dir_on_entry(path, tmp_path, flags, files_seen, de,
                                &total, on_file);

        if (res < 0) {
            break;
        }
    }

    closedir(dir);
    return res < 0 ? -1 : total;
}

#endif

int list_dir(const char *path, unsigned flags, on_file_b on_file)
{
    int res;
    qh_t(st_file) files_seen;

    qh_init(st_file, &files_seen);
    res = __list_dir(path, flags, &files_seen, on_file);
    qh_wipe(st_file, &files_seen);

    return res;
}

/*}}} */

/****************************************************************************/
/* file descriptor related                                                  */
/****************************************************************************/

ssize_t xwrite(int fd, const void *data, ssize_t len)
{
    const char *s = data;
    ssize_t to_write = len;

    while (len > 0) {
        ssize_t nb = write(fd, s, len);

        if (nb < 0) {
            if (ERR_RW_RETRIABLE(errno))
                continue;
            return -1;
        }
        s   += nb;
        len -= nb;
    }
    return to_write;
}

ssize_t xwrite_file_extended(const char * nonnull path,
                             const void * nonnull data,
                             ssize_t dlen, int flags, mode_t mode)
{
    int fd, res;

    fd = RETHROW(open(path, flags, mode));
    res = xwrite(fd, data, dlen);
    if (res < 0) {
        int save_errno = errno;
        unlink(path);
        close(fd);
        errno = save_errno;
        return -1;
    }
    close(fd);
    return dlen;
}

ssize_t xwritev(int fd, struct iovec *iov, int iovcnt)
{
    ssize_t written = 0;

    while (iovcnt) {
        ssize_t nb = writev(fd, iov, iovcnt);

        if (nb < 0) {
            if (ERR_RW_RETRIABLE(errno))
                continue;
            return -1;
        }
        written += nb;
        while (nb) {
            if ((size_t)nb >= iov->iov_len) {
                nb -= iov->iov_len;
                iovcnt--;
                iov++;
            } else {
                iov->iov_len  -= nb;
                iov->iov_base  = (char *)iov->iov_base + nb;
                break;
            }
        }
        while (iovcnt && iov[0].iov_len == 0) {
            iovcnt--;
            iov++;
        }
    }
    return written;
}

ssize_t xpwrite(int fd, const void *data, ssize_t len, off_t offset)
{
    const char *s = data;
    ssize_t to_write = len;

    while (len > 0) {
        ssize_t nb = pwrite(fd, s, len, offset);

        if (nb < 0) {
            if (ERR_RW_RETRIABLE(errno))
                continue;
            return -1;
        }
        s      += nb;
        len    -= nb;
        offset += nb;
    }
    return to_write;
}

int xread(int fd, void *data, ssize_t len)
{
    char *s = data;
    while (len > 0) {
        ssize_t nb = read(fd, s, len);

        if (nb < 0) {
            if (ERR_RW_RETRIABLE(errno))
                continue;
            return -1;
        }
        if (nb == 0)
            return -1;
        s   += nb;
        len -= nb;
    }
    return 0;
}

int xpread(int fd, void *data, ssize_t len, off_t offset)
{
    char *s = data;
    while (len > 0) {
        ssize_t nb = pread(fd, s, len, offset);

        if (nb < 0) {
            if (ERR_RW_RETRIABLE(errno))
                continue;
            return -1;
        }
        if (nb == 0)
            return -1;
        s      += nb;
        len    -= nb;
        offset += nb;
    }
    return 0;
}

int xftruncate(int fd, off_t offs)
{
    for (;;) {
        int res = ftruncate(fd, offs);

        if (res < 0 && ERR_RW_RETRIABLE(errno))
            continue;
        return res;
    }
}

bool is_fd_open(int fd)
{
    return fcntl(fd, F_GETFD) != -1 || errno != EBADF;
}

void devnull_dup(int fd)
{
    int nullfd;

    close(fd);

    nullfd = open("/dev/null", O_RDWR);
    assert (nullfd >= 0);
    if (fd != nullfd) {
        dup2(nullfd, fd);
        close(nullfd);
    }
}

static int which_check_path(const char *nonnull cmd, const char *dir,
                            char cmd_path[static PATH_MAX])
{
    char local_buf[PATH_MAX];

    RETHROW(path_extend(local_buf, dir, "%s", cmd));
    RETHROW(access(local_buf, X_OK));
    pstrcpy(cmd_path, PATH_MAX, local_buf);
    return 0;
}

int which(const char *nonnull cmd, char cmd_path[static PATH_MAX])
{
    pstream_t ps = ps_initstr(getenv("PATH"));

    while (!ps_done(&ps)) {
        pstream_t dir;
        char dirbuf[PATH_MAX];

        if (ps_get_ps_chr_and_skip(&ps, ':', &dir) < 0) {
            dir = __ps_get_ps_upto(&ps, ps_end(&ps));
        }
        if (ps_len(&dir) + 1 > sizeof(dirbuf)) {
            continue;
        }
        memcpyz(dirbuf, dir.s, ps_len(&dir));
        if (which_check_path(cmd, dirbuf, cmd_path) >= 0) {
            return 0;
        }
    }
    return -1;
}

bool is_fancy_fd(int fd)
{
    const char *term;

    if (!isatty(fd))
        return false;
    term = getenv("TERM");
    return term && *term && !strequal(term, "dumb");
}

void term_get_size(int *cols, int *rows)
{
    struct winsize w;
    int fd;

    if ((fd = open("/dev/tty", O_RDONLY)) != -1) {
        if (ioctl(fd, TIOCGWINSZ, &w) != -1) {
            *rows = w.ws_row;
            *cols = w.ws_col;
        }
        close(fd);
    }
    if (*rows <= 0) {
        *rows = atoi(getenv("LINES") ?: "24");
    }
    if (*cols <= 0) {
        *cols = atoi(getenv("COLUMNS") ?: "80");
    }
}

int fd_set_features(int fd, int flags)
{
    STATIC_ASSERT(FD_FEAT_NONBLOCK != FD_FEAT_TCP_NODELAY);
    STATIC_ASSERT(FD_FEAT_DIRECT   != FD_FEAT_TCP_NODELAY);
    STATIC_ASSERT(FD_FEAT_CLOEXEC  != FD_FEAT_TCP_NODELAY);

    if (flags & (O_NONBLOCK | O_DIRECT)) {
        int res;

        res = fcntl(fd, F_GETFL);
        if (res < 0) {
            return e_error("fcntl failed: %m");
        }
        if (fcntl(fd, F_SETFL, res | (flags & (O_NONBLOCK | O_DIRECT)))) {
          return e_error("fcntl failed: %m");
        }
    }
    if (flags & O_CLOEXEC) {
        int res = fcntl(fd, F_GETFD);
        if (res < 0) {
            return e_error("fcntl failed: %m");
        }
        if (fcntl(fd, F_SETFD, res | FD_CLOEXEC)) {
            return e_error("fcntl failed: %m");
        }
    }

    if (flags & FD_FEAT_TCP_NODELAY) {
        int v = 1;

        if (setsockopt(fd, IPPROTO_TCP, TCP_NODELAY, &v, sizeof(int)) < 0) {
            return e_error("setsockopt failed to set TCP_NODELAY: %m");
        }
    }

    return 0;
}

int fd_unset_features(int fd, int flags)
{
    if (flags & (O_NONBLOCK | O_DIRECT)) {
        int res;

        res = fcntl(fd, F_GETFL);
        if (res < 0) {
            return e_error("fcntl failed: %m");
        }
        if (fcntl(fd, F_SETFL, res & ~(flags & (O_NONBLOCK | O_DIRECT)))) {
            return e_error("fcntl failed: %m");
        }
    }
    if (flags & O_CLOEXEC) {
        int res = fcntl(fd, F_GETFD);
        if (res < 0) {
            return e_error("fcntl failed: %m");
        }
        if (fcntl(fd, F_SETFD, res & ~FD_CLOEXEC)) {
            return e_error("fcntl failed: %m");
        }
    }

    if (flags & FD_FEAT_TCP_NODELAY) {
        int v = 0;

        if (setsockopt(fd, IPPROTO_TCP, TCP_NODELAY, &v, sizeof(int)) < 0) {
            return e_error("setsockopt failed to unset TCP_NODELAY: %m");
        }
    }


    return 0;
}

ssize_t fd_get_path(int fd, char buf[], size_t buf_len)
{
    char proc[PATH_MAX];
    size_t path_len;
    struct stat fdst;
    struct stat pathst;

    snprintf(proc, sizeof(proc), "/proc/self/fd/%d", fd);
    path_len = RETHROW(readlink(proc, buf, buf_len));

    if (path_len == buf_len) {
        /* Path to long to append a nul byte */
        errno = ENAMETOOLONG;
        return -1;
    }
    buf[path_len] = '\0';

    RETHROW(fstat(fd, &fdst));
    RETHROW(stat(buf, &pathst));

    /* This is neither a file or a directory */
    if (!S_ISREG(pathst.st_mode) && !S_ISDIR(pathst.st_mode)) {
        errno = EINVAL;
        return -1;
    }

    /* The file is not the one we were expected */
    if (fdst.st_dev != pathst.st_dev || fdst.st_ino != pathst.st_ino) {
        errno = ENOENT;
        return -1;
    }

    return path_len;
}

void close_fds_unix(int fd_min, qv_t(u32) * nullable to_keep)
{
    int maxfd = sysconf(_SC_OPEN_MAX);

    if (to_keep) {
        dsort32(to_keep->tab, to_keep->len);
        to_keep->len = uniq32(to_keep->tab, to_keep->len);
    }

    if (maxfd == -1) {
        maxfd = 1024;
    }

    for (int fd = fd_min + 1; fd < maxfd; fd++) {
        if (!to_keep
        ||  !contains32(fd, to_keep->tab, to_keep->len))
        {
            int to_close = fd;

            p_close(&to_close);
        }
    }
}

#ifndef __linux__
void close_fds(int fd_min, qv_t(u32) * nullable to_keep)
{
    close_fds_unix(fd_min, to_keep);
}
#endif

int iovec_vector_kill_first(qv_t(iovec) *iovs, ssize_t len)
{
    int i = 0;

    while (i < iovs->len && len >= (ssize_t)iovs->tab[i].iov_len) {
        len -= iovs->tab[i++].iov_len;
    }
    qv_splice(iovs, 0, i, NULL, 0);
    if (iovs->len > 0 && len) {
        iovs->tab[0].iov_base = (byte *)iovs->tab[0].iov_base + len;
        iovs->tab[0].iov_len  -= len;
    }
    return i;
}


static __thread bool in_ifork_g;

pid_t ifork(void)
{
    pid_t pid;

    in_ifork_g = true;

    MODULE_METHOD_RUN_VOID(at_fork_prepare);

    pid = (fork)();

    if (pid == 0) {
        MODULE_METHOD_RUN_VOID(at_fork_on_child);
    } else
    if (pid > 0) {
        MODULE_METHOD_RUN_INT(at_fork_on_parent, pid);
    }

    in_ifork_g = false;

    return pid;
}

bool ifork_in_progress(void)
{
    return in_ifork_g;
}
