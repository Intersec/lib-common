/***************************************************************************/
/*                                                                         */
/* Copyright 2020 INTERSEC SA                                              */
/*                                                                         */
/* Licensed under the Apache License, Version 2.0 (the "License");         */
/* you may not use this file except in compliance with the License.        */
/* You may obtain a copy of the License at                                 */
/*                                                                         */
/*     http://www.apache.org/licenses/LICENSE-2.0                          */
/*                                                                         */
/* Unless required by applicable law or agreed to in writing, software     */
/* distributed under the License is distributed on an "AS IS" BASIS,       */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.*/
/* See the License for the specific language governing permissions and     */
/* limitations under the License.                                          */
/*                                                                         */
/***************************************************************************/

#if !defined(IS_LIB_COMMON_CORE_H) || defined(IS_LIB_COMMON_CORE_STDLIB_H)
#  error "you must include core.h instead"
#else
#define IS_LIB_COMMON_CORE_STDLIB_H

/*----- core-havege.c -----*/

struct sb_t;

int is_rand(void) __leaf;

/** Thread-safe implementation of rand() using per-thread autogenerated seed.
 */
#define rand()  is_rand()

#define rands()  rands_uneeded()

/** Generate a 32bit random integer.
 */
uint32_t rand32(void) __leaf;

/** Generate a 64bit random integer.
 */
uint64_t rand64(void) __leaf;

/** Generate a random integer in the range [first,last].
 *
 * Both boundaries are included in the range of integers that can be
 * generated.
 */
int64_t rand_range(int64_t first, int64_t last) __leaf;

/** Generate a random double in the range [first,last].
 */
double rand_ranged(double first, double last) __leaf;

#define UUID_HEX_LEN  (32 + 4)
typedef uint8_t uuid_t[16];
void rand_generate_uuid_v4(uuid_t uuid);
#ifndef __cplusplus
void __uuid_fmt(char buf[static UUID_HEX_LEN], uuid_t uuid);
#else
void __uuid_fmt(char buf[], uuid_t uuid);
#endif
void sb_add_uuid(struct sb_t * nonnull sb, uuid_t uuid);


/*----- versions -----*/

typedef struct core_version_t {
    bool        is_main_version; /* Main versions are printed first */
    const char * nonnull name;
    const char * nonnull version;
    const char * nonnull git_revision;
} core_version_t;
extern core_version_t core_versions_g[8];
extern int core_versions_nb_g;

void core_push_version(bool is_main_version, const char * nonnull name,
                       const char * nonnull version,
                       const char * nonnull git_revision);

#endif
