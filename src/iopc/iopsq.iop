/***************************************************************************/
/*                                                                         */
/* Copyright 2020 INTERSEC SA                                              */
/*                                                                         */
/* Licensed under the Apache License, Version 2.0 (the "License");         */
/* you may not use this file except in compliance with the License.        */
/* You may obtain a copy of the License at                                 */
/*                                                                         */
/*     http://www.apache.org/licenses/LICENSE-2.0                          */
/*                                                                         */
/* Unless required by applicable law or agreed to in writing, software     */
/* distributed under the License is distributed on an "AS IS" BASIS,       */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.*/
/* See the License for the specific language governing permissions and     */
/* limitations under the License.                                          */
/*                                                                         */
/***************************************************************************/

package iopsq;

/* {{{ Type */

@ctype(iop__int_size__t)
enum IntSize {
    S8,
    S16,
    S32,
    S64,
};

@ctype(iop__int_type__t)
struct IntType {
    bool isSigned;
    IntSize size;
};

@ctype(iop__string_type__t)
enum StringType {
    STRING,
    BYTES,
    XML,
};

@ctype(iop__type__t)
union Type {
    IntType i;
    void b;
    void d;
    StringType s;
    void v;

    @pattern("[a-zA-Z0-9\.]*") @minLength(1)
    string typeName;

    /* TODO Could include length contraints. */
    Type& array;

    /** Type identifier generated by a type table.
     *
     * This kind of field can be used when generating local IOPs from other
     * generated IOPs.
     *
     * See \p iopsq_type_table_fill_type documentation for more information.
     */
    uint typeId;
};

/* }}} */

@ctype(iop__package_elem__t)
abstract local class PackageElem {
    @pattern("[a-zA-Z0-9]*") @minLength(1)
    string name;
};

/* {{{ Struct */

@ctype(iop__value__t)
union Value {
    long i;
    ulong u;
    double d;
    string s;
    bool b;
};

@ctype(iop__opt_info__t)
struct OptInfo {
    Value? defVal;
};

@ctype(iop__field__t)
struct Field {
    @pattern("[a-zA-Z0-9]*") @minLength(1)
    string name;
    Type type;
    /* TODO constraints */
    /* TODO attributes */
    OptInfo? optional;
    ushort? tag;
    void? isReference;
};

@ctype(iop__structure__t)
abstract local class Structure : 1 : PackageElem {
};

@ctype(iop__struct__t)
local class Struct : 2 : Structure {
    Field[] fields;
};

/* }}} */
/* {{{ Enum */

@ctype(iop__enum_val__t)
struct EnumVal {
    @pattern("[A-Z0-9_]*") @minLength(1)
    string name;
    int? val;
    /* TODO Aliases */
};

@ctype(iop__enum__t)
local class Enum : 3 : PackageElem {
    EnumVal[] values;
    /* TODO Strictness */
};

/* }}} */
/* {{{ Union */

@ctype(iop__union__t)
local class Union : 4 : Structure {
    @minOccurs(1)
    Field[] fields;
};

/* }}} */
/* {{{ Typedef */

/* TODO Implement */
/*
@ctype(iop__typedef__t)
local class Typedef : 5 : PackageElem {
    Type type;
};
*/

/* }}} */
/* {{{ Package */

@ctype(iop__package__t)
struct Package {
    @pattern("[a-z_\.]*") @minLength(1)
    string name;
    PackageElem[] elems;
    /* TODO sub-packages */
};

/* }}} */

/* TODO class */
