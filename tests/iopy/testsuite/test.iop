/***************************************************************************/
/*                                                                         */
/* Copyright 2020 INTERSEC SA                                              */
/*                                                                         */
/* Licensed under the Apache License, Version 2.0 (the "License");         */
/* you may not use this file except in compliance with the License.        */
/* You may obtain a copy of the License at                                 */
/*                                                                         */
/*     http://www.apache.org/licenses/LICENSE-2.0                          */
/*                                                                         */
/* Unless required by applicable law or agreed to in writing, software     */
/* distributed under the License is distributed on an "AS IS" BASIS,       */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.*/
/* See the License for the specific language governing permissions and     */
/* limitations under the License.                                          */
/*                                                                         */
/***************************************************************************/

package test;

enum EnumA {
    @alias(A_ALIAS)
    A = 1 << 0,

    @alias(B1_ALIAS)
    @alias(B2_ALIAS)
    B = 1 << 1,
};

class ClassA : 1 {
    @max(1000)
    int  field1 = 0;
    int? optField;
};

class ClassB : 2 : ClassA {
    int field2 = 0;
};

class ClassC {
    int a = 0;
};

struct Error {
    int code;
    string desc;
};

union UnionA {
    @max(100)
    int i;
    ClassA a;
    test.emptystuffs.Tab tab;
    string s;
};

union UnionB {
    UnionA a;
};

/* ambiguous union */
union UnionC {
    int positive;
    int negative;
    int zero;

    ClassA a;
    UnionB b;
    double d;
    string s;
};

struct StructA {
    EnumA? e;
    ClassA? a;
    UnionA? u;
    UnionA[] tu;
};

struct StructB {
    string   a;
    string   b;
    string[] tab;
};

struct StructC {
    ulong u = 0xffffffffffffffff;
    @private
    string priv = "test";
};

struct StructD {
    StructA a;
    int i = 0;
};

struct StructE {
    StructD d;
};

struct StructF {
    string s;
    @minOccurs(1)
    int[] i;
};

struct StructG {
    int a;
    StructG? parent;
    StructG? child;
};

struct StructH {
    UnionC c;
};

abstract class ConstraintsA : 1 {
    @pattern("[a-z]*")
    string name;
};

class ConstraintsB : 2 : ConstraintsA {
    @max(1000)
    int i;
};

abstract class StaticAttrsA {
    static int intAttr;
    static string strAttr = "plop";
};

class StaticAttrsB : 1 : StaticAttrsA {
    static int intAttr = 999;
};

class StaticAttrsC : 2 : StaticAttrsB {
    static string strAttr = "truc";
};

/** Brief enum documentation.
 *
 * Detailed enum documentation.
 *
 * \warning Warning enum documentation.
 */
@(test:gen1, 1)
@strict
enum EnumDescription {
    /** A brief documentation.
     *
     * A detailed documentation.
     *
     * \warning A warning documentation.
     */
    @(test:gen2, 2.2)
    @(test:gen3, "jiojj")
    @alias(A_ALIAS)
    A = 1,

    /** B brief documentation.
     *
     * B detailed documentation.
     *
     * \warning B warning documentation.
     */
    @(test:gen4, true)
    @(test:gen5, "field": { "f1": "val1", "f2": 1 })
    @alias(B1_ALIAS)
    @alias(B2_ALIAS)
    B = 2,
};

/** Brief union documentation.
 *
 * Detailed union documentation.
 *
 * \warning Warning union documentation.
 */
@(test:gen1, true)
@deprecated
union UnionDescription {
    /** A brief documentation.
     *
     * A detailed documentation.
     *
     * \warning A warning documentation.
     */
    @(test:gen2, "plop")
    @min(-15)
    @max(75)
    @nonZero
    int a;

    /** B brief documentation.
     *
     * B detailed documentation.
     *
     * \warning B warning documentation.
     */
    @(test:gen3, 15)
    @(test:gen4, "plop": 4)
    @minLength(1)
    @maxLength(15)
    @nonEmpty
    @pattern("[a-zA-Z0-9]*")
    @cdata
    string b;

    /** C brief documentation.
     *
     * C detailed documentation.
     *
     * \warning C warning documentation.
     */
    @(test:gen5, 1)
    @length(12)
    @deprecated
    bytes c;
};

/** Brief struct documentation.
 *
 * Detailed struct documentation.
 *
 * \warning Warning struct documentation.
 */
@(test:gen1, true)
@deprecated
struct StructDescription {
    /** A brief documentation.
     *
     * A detailed documentation.
     *
     * \warning A warning documentation.
     */
    @(test:gen2, "plop")
    @min(-20.12)
    @max(1.2)
    @nonZero
    double a = 0.5;

    /** B brief documentation.
     *
     * B detailed documentation.
     *
     * \warning B warning documentation.
     */
    @(test:gen3, 15)
    @(test:gen4, "plop": 4)
    UnionB? b;

    /** C brief documentation.
     *
     * C detailed documentation.
     *
     * \warning C warning documentation.
     */
    @(test:gen5, 1)
    @minOccurs(1)
    @maxOccurs(10)
    @deprecated
    EnumA[] c;
};

/** Brief base class documentation.
 *
 * Detailed base class documentation.
 *
 * \warning Warning base class documentation.
 */
@(test:gen1, true)
@deprecated
@private
abstract class BaseClassDescription {
    /** Static A brief documentation.
     *
     * Static A detailed documentation.
     *
     * \warning Static A warning documentation.
     */
    static string staticA = "plop";

    /** Static B brief documentation.
     *
     * Static B detailed documentation.
     *
     * \warning Static B warning documentation.
     */
    static int staticB;

    /** Static C base brief documentation.
     *
     * Static C base detailed documentation.
     *
     * \warning Static C base warning documentation.
     */
    static ulong staticC = 42;

    /** A brief documentation.
     *
     * A detailed documentation.
     *
     * \warning A warning documentation.
     */
    @(test:gen2, "plop")
    StructA a;
};

/** Brief child class documentation.
 *
 * Detailed child class documentation.
 *
 * \warning Warning child class documentation.
 */
@(test:gen3, 7)
class ChildClassDescription : 1 : BaseClassDescription {
    static int staticB = 26;

    /** Static C child brief documentation.
     *
     * Static C child detailed documentation.
     *
     * \warning Static C child warning documentation.
     */
    static ulong staticC = 14;

    /** B brief documentation.
     *
     * B detailed documentation.
     *
     * \warning B warning documentation.
     */
    @(test:gen4, 3.4)
    ClassB? b;
};

interface InterfaceA {
    funA
        in (ClassA a)
        out (EnumA status, int res)
        throw Error;
    funB
        in (ClassA a)
        out (EnumA status, int res)
        throw Error;
    funAsync
        in (ClassA a)
        out null;
    funToggleVoid
        in (void? ov)
        out (void? ov);
};

module ModuleA : test.emptystuffs.EmptyModule {
    InterfaceA interfaceA;
};
