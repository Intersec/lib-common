/***************************************************************************/
/*                                                                         */
/* Copyright 2022 INTERSEC SA                                              */
/*                                                                         */
/* Licensed under the Apache License, Version 2.0 (the "License");         */
/* you may not use this file except in compliance with the License.        */
/* You may obtain a copy of the License at                                 */
/*                                                                         */
/*     http://www.apache.org/licenses/LICENSE-2.0                          */
/*                                                                         */
/* Unless required by applicable law or agreed to in writing, software     */
/* distributed under the License is distributed on an "AS IS" BASIS,       */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.*/
/* See the License for the specific language governing permissions and     */
/* limitations under the License.                                          */
/*                                                                         */
/***************************************************************************/

package tstiop_backward_compat_typedef;

struct StructNotChanged {
    int a;
};

struct HashV2 {
    bool?  b;
    long[] i;
    string s;
};

union MyUnionA {
    int    ua;
    byte   ub;
    string us;
};

struct VoidStruct {
};

@(test:gen1, 1)
enum MyEnumA {
    @(test:gen2, 2.2)
    @alias(A_ALIAS)
    A = 0x0,
    B = 0x1,
    @alias(C_ALIAS_1)
    @alias(C_ALIAS_2)
    C = 0x2,
    @alias(D_ALIAS)
    D = 0x10,
};

@strict
enum MyEnumB {
    A,
    B,
    C,
};

class MyClass1 : 1 {
    @(test:gen1, 1)
    int int1;
};

class MyClass2 : 2 : MyClass1 {
    int int2;
};

class MyClass3 : 3 : MyClass2 {
    int int3;
    bool bool1;
    string? string1;
    MyClass1? nextClass;
    MyClass1? nextClass2;
};

class MyClass2Bis : 4 : MyClass1 {
    int int2;
};

@private
class MyClass2Priv : 5 : MyClass2 {
};

abstract class MyClass2Abstract : 6 : MyClass2 {
};

class MyClass1After : 1 {
    int int1;
};

class MyClassEmpty : 5 : MyClass1After {
};

class MyClass2After : 2 : MyClassEmpty {
    int int2;
};
