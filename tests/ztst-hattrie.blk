/***************************************************************************/
/*                                                                         */
/* Copyright 2020 INTERSEC SA                                              */
/*                                                                         */
/* Licensed under the Apache License, Version 2.0 (the "License");         */
/* you may not use this file except in compliance with the License.        */
/* You may obtain a copy of the License at                                 */
/*                                                                         */
/*     http://www.apache.org/licenses/LICENSE-2.0                          */
/*                                                                         */
/* Unless required by applicable law or agreed to in writing, software     */
/* distributed under the License is distributed on an "AS IS" BASIS,       */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.*/
/* See the License for the specific language governing permissions and     */
/* limitations under the License.                                          */
/*                                                                         */
/***************************************************************************/

#include <lib-common/datetime.h>
#include <lib-common/container.h>
#include <lib-common/qps-hat.h>

#undef assert
#define assert(Cond) if (unlikely(!(Cond))) {                                \
        e_panic("assert failed at %s:%d: %s", __FILE__, __LINE__, #Cond);    \
    }

static void (print_time_diff)(const char *str, struct rusage *tstart,
                              struct rusage *tend, struct timeval *start,
                              struct timeval *end, uint64_t count)
{
    int64_t systime = timeval_diff64(&tend->ru_stime, &tstart->ru_stime) / 1000;
    int64_t usertime = timeval_diff64(&tend->ru_utime, &tstart->ru_utime) / 1000;
    int64_t totaltime = end ? timeval_diff64(end, start) / 1000 : systime + usertime;

    fprintf(stderr, "%s:", str);
#define PRINT_DIFF(str, diff)                                                \
    if (diff >= 10000) {                                                     \
        fprintf(stderr, " %s=%ds (%d%%)", str, (int)(diff / 1000),           \
                (int)((diff * 100) / totaltime));                            \
    } else                                                                   \
    if (diff >= 1000) {                                                      \
        fprintf(stderr, " %s=%ds%03dms (%d%%)", str, (int)(diff / 1000),     \
                (int)(diff % 1000), (int)((diff * 100) / totaltime));        \
    } else {                                                                 \
        fprintf(stderr, " %s=%dms (%d%%)", str, (int)diff,                   \
                (int)((diff * 100) / totaltime));                            \
    }

    PRINT_DIFF("system", systime)
    PRINT_DIFF("user", usertime)
    PRINT_DIFF("total", totaltime)
    fprintf(stderr, " => M/s: %2f\n", count / (totaltime * 1000.0));
}

#define print_time_diff(str, tstart, tend, count)  \
    (print_time_diff)(str, tstart, tend, NULL, NULL, count)

#define RUN_TEST(Name, Count, Code) do {                                     \
        t_scope;                                                             \
        struct rusage  start, end;                                           \
        struct timeval tstart, tend;                                         \
                                                                             \
        gettimeofday(&tstart, NULL);                                         \
        getrusage(RUSAGE_SELF, &start);                                      \
        assert (Count >= 100);                                               \
        (Code);                                                              \
        getrusage(RUSAGE_SELF, &end);                                        \
        gettimeofday(&tend, NULL);                                           \
        (print_time_diff)(t_fmt(Name" of %u entries", Count), &start, &end,  \
                          &tstart, &tend, Count);                            \
    } while (0)

static void run_seq_test(qps_t *qps, bool is_nullable, uint32_t count)
{
    qps_handle_t htrie = qhat_create(qps, 4, is_nullable);
    qhat_t trie;

    qhat_init(&trie, qps, htrie);
    qhat_compute_counts(&trie, false);
    RUN_TEST("seq insertion", count, ({
        for (uint32_t i = 0; i < count; i++) {
            uint32_t *slot = qhat_set(&trie, i);
            *slot = 2;
        }
    }));

    RUN_TEST("seq update", count, ({
        for (uint32_t i = 0; i < count; i++) {
            uint32_t *slot = qhat_set(&trie, i);
            *slot = i + 1;
        }
    }));

    RUN_TEST("seq lookup", count, ({
        for (uint32_t i = 0; i < count; i++) {
            const uint32_t *slot = qhat_get(&trie, i);
            assert (*slot == i + 1);
        }
    }));

    RUN_TEST("seq entry enumeration", count, ({
        uint32_t i = 0;
        qhat_for_each_unsafe(en, &trie) {
            const uint32_t *slot = en.value;
            assert (en.key == i);
            assert (*slot == i + 1);
            i++;
        }
        assert (i == count);
    }));

    RUN_TEST("seq key enumeration", count, ({
        uint32_t i = 0;
        qhat_for_each_key_unsafe(en, &trie) {
            assert (en.key == i);
            i++;
        }
        assert (i == count);
    }));

    RUN_TEST("seq key+val enumeration", count, ({
        uint32_t i = 0;
        qhat_for_each_key_unsafe(en, &trie) {
            const uint32_t *slot = qhat_get_enumeration_value(&en);
            assert (en.key == i);
            assert (*slot == i + 1);
            i++;
        }
        assert (i == count);
    }));

    RUN_TEST("seq safe entry enumeration", count, ({
        uint32_t i = 0;
        qhat_for_each_safe(en, &trie) {
            const uint32_t *slot = en.value;
            assert (en.key == i);
            assert (*slot == i + 1);
            i++;
        }
        assert (i == count);
    }));

    RUN_TEST("seq safe key enumeration", count, ({
        uint32_t i = 0;
        qhat_for_each_key_safe(en, &trie) {
            assert (en.key == i);
            i++;
        }
        assert (i == count);
    }));

    RUN_TEST("seq safe key+val enumeration", count, ({
        uint32_t i = 0;
        qhat_for_each_key_safe(en, &trie) {
            const uint32_t *slot = qhat_get_enumeration_value(&en);
            assert (en.key == i);
            assert (*slot == i + 1);
            i++;
        }
        assert (i == count);
    }));

    RUN_TEST("seq removal", count, ({
        for (uint32_t i = 0; i < count; i++) {
            qhat_remove(&trie, i, NULL);
        }
    }));
    qhat_destroy(&trie);
}

static void run_rand_test(qps_t *qps, bool is_nullable, uint32_t count,
                          uint32_t (^sel_rand)(void))
{
    qps_handle_t htrie = qhat_create(qps, 4, false);
    qhat_t trie;
    qh_t(u32) h = QH_INIT(u32, h);
    qv_t(u32) data;
    qv_t(u32) cpy;
    qv_init(&data);
    qv_init(&cpy);
    qv_grow(&data, count);

    srand(0);
    for (uint32_t i = 0; i < count; i++) {
        uint32_t val = sel_rand();
        while (qh_add(u32, &h, val)) {
            val = sel_rand();
        }
        qv_append(&data, val);
    }
    qv_splice(&cpy, 0, 0, data.tab, data.len);
    qh_wipe(u32, &h);

    qhat_init(&trie, qps, htrie);
    RUN_TEST("rand insertion", count, ({
        for (uint32_t i = 0; i < count; i++) {
            uint32_t *slot = qhat_set(&trie, data.tab[i]);
            if ((i % (count / 100)) == 0) {
                fprintf(stderr, "\r%d%%", i / (count / 100));
                fflush(stdout);
            }
            *slot = i + 1;
        }
        fprintf(stderr, "\r");
    }));

    RUN_TEST("rand update", count, ({
        for (uint32_t i = 0; i < count; i++) {
            uint32_t *slot = qhat_set(&trie, data.tab[i]);
            assert (*slot == i + 1);
            *slot = data.tab[i] + 1;
        }
    }));

    RUN_TEST("rand lookup", count, ({
        for (uint32_t i = 0; i < count; i++) {
            const uint32_t *slot = qhat_get(&trie, data.tab[i]);
            assert (*slot == data.tab[i] + 1);
        }
    }));

    dsort32(data.tab, data.len);

    RUN_TEST("seq lookup", count, ({
        for (uint32_t i = 0; i < count; i++) {
            const uint32_t *slot = qhat_get(&trie, data.tab[i]);
            assert (*slot == data.tab[i] + 1);
        }
    }));

    RUN_TEST("seq enumeration", count, ({
        uint32_t i = 0;
        qhat_for_each_unsafe(en, &trie) {
            const uint32_t *slot = en.value;
            assert (*slot == en.key + 1);
            i++;
        }
        assert (i == count);
    }));

    RUN_TEST("rand removal", count, ({
        for (uint32_t i = 0; i < count; i++) {
            qhat_remove(&trie, cpy.tab[i], NULL);
        }
    }));

    qv_wipe(&data);
    qv_wipe(&cpy);
    qhat_destroy(&trie);
}

int main(int argc, char **argv)
{
    t_scope;
    qps_t *qps;

    if (argc < 2) {
        e_fatal("require a path of a qps as input");
    }

    MODULE_REQUIRE(qps);
#if 0
    {
        cpu_set_t cpuset;
        CPU_ZERO(&cpuset);
        CPU_SET(0, &cpuset);
        pthread_setaffinity_np(pthread_self(), sizeof(cpuset), &cpuset);
    }
#endif

    if (qps_exists(argv[1])) {
        qps = qps_open(argv[1], "ztst-hattrie", NULL);
        if (qps == NULL)
            e_fatal("cannot open qps");
    } else {
        qps = qps_create(argv[1], "ztst-hattrie", 0755, NULL, 0);
        if (qps == NULL)
            e_fatal("cannot create qps");
    }

    e_info("speed Seq 100000000 in Trie NOT NULL 32bits");
    run_seq_test(qps, false, 100000000);

    e_info("speed Seq 100000000 in Bitmap NOT NULL");
    {
        qps_handle_t hmap = qps_bitmap_create(qps, false);
        qps_bitmap_t map;

        qps_bitmap_init(&map, qps, hmap);

        RUN_TEST("seq insertion", 100000000, ({
            for (uint32_t i = 0; i < 100000000; i++) {
                assert (!qps_bitmap_set(&map, i));
            }
        }));

        RUN_TEST("seq lookup", 100000000, ({
            for (uint32_t i = 0; i < 100000000; i++) {
                assert (qps_bitmap_get(&map, i));
            }
        }));

        RUN_TEST("seq enumeration", 100000000, ({
            uint32_t i = 0;
            qps_bitmap_for_each(en, &map) {
                assert (en.key.key == i++);
            }
            assert (i == 100000000);
        }));

        RUN_TEST("seq nn enumeration", 100000000, ({
            uint32_t i = 0;
            qps_bitmap_for_each_nn(en, &map) {
                assert (en.key.key == i++);
            }
            assert (i == 100000000);
        }));

        RUN_TEST("seq removal", 100000000, ({
            for (uint32_t i = 0; i < 100000000; i++) {
                qps_bitmap_remove(&map, i);
            }
        }));
        qps_bitmap_destroy(&map);
    }

    e_info("Speed Seq 100000000 in Trie NULL 32bits");
    run_seq_test(qps, true, 100000000);

    e_info("Speed Random 1000000 within 1->10000000 in Trie NOT NULL 32bits");
    run_rand_test(qps, false, 1000000, ^{
        return ((uint32_t)rand()) % 10000000;
    });

    e_info("Speed Random 50000000 in Trie NOT NULL 32bits");
    run_rand_test(qps, false, 50000000, ^{
        return ((uint32_t)rand());
    });

    e_info("Speed Random 10000000 in Trie NULL 32bits");
    run_rand_test(qps, true, 10000000, ^{
        return ((uint32_t)rand());
    });

    qps_close(&qps);
    return 0;
}
