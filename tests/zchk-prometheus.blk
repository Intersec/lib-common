/***************************************************************************/
/*                                                                         */
/* Copyright 2022 INTERSEC SA                                              */
/*                                                                         */
/* Licensed under the Apache License, Version 2.0 (the "License");         */
/* you may not use this file except in compliance with the License.        */
/* You may obtain a copy of the License at                                 */
/*                                                                         */
/*     http://www.apache.org/licenses/LICENSE-2.0                          */
/*                                                                         */
/* Unless required by applicable law or agreed to in writing, software     */
/* distributed under the License is distributed on an "AS IS" BASIS,       */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.*/
/* See the License for the specific language governing permissions and     */
/* limitations under the License.                                          */
/*                                                                         */
/***************************************************************************/

/* LCOV_EXCL_START */

#include <lib-common/thr.h>
#include <lib-common/prometheus-client.h>
#include <lib-common/z.h>

#include <lib-common/prometheus-client/priv.h>

/* {{{ metric_labels_thread_safety */

static int z_metric_labels_thread_safety(void)
{
    t_scope;
    const int nb_children = 1000;
    thr_syn_t syn;
    prom_counter_t *counter;
    bool *seen = t_new(bool, nb_children);

    MODULE_REQUIRE(prometheus_client);

    /* Create a counter */
    counter = prom_counter_new("test_counter", "test counter", "label");

    /* Create children from different threads */
    thr_syn_init(&syn);
    for (int i = 0; i < nb_children; i++) {
        thr_syn_schedule_b(&syn, ^{
            t_scope;

            prom_metric_labels(counter, t_fmt("%d", i));
        });
    }
    thr_syn_wait(&syn);
    thr_syn_wipe(&syn);

    /* Check all the children were actually created */
    dlist_for_each_entry(prom_metric_t, child, &counter->children_list,
                         siblings_list)
    {
        lstr_t label = LSTR(child->label_values.tab[0]);
        int child_ind;

        Z_ASSERT_N(lstr_to_int(label, &child_ind));
        Z_ASSERT_N(child_ind);
        Z_ASSERT_LT(child_ind, nb_children);
        Z_ASSERT(!seen[child_ind]);
        seen[child_ind] = true;
    }
    for (int i = 0; i < nb_children; i++) {
        Z_ASSERT(seen[i]);
    }

    MODULE_RELEASE(prometheus_client);

    Z_HELPER_END;
}

/* }}} */
/* {{{ counter_value_thread_safety */

static int z_counter_value_thread_safety(void)
{
    thr_syn_t syn;
    prom_counter_t *counter;
    double val;

    MODULE_REQUIRE(prometheus_client);

    /* Create a counter */
    counter = prom_counter_new("test_counter", "test counter");

    /* Its value should be 0 */
    val = obj_vcall(counter, get_value);
    Z_ASSERT_EQ(val, 0.);

    /* Increment its value from different threads */
    thr_syn_init(&syn);
    for (int i = 0; i < 1000; i++) {
        thr_syn_schedule_b(&syn, ^{
            obj_vcall(counter, inc);
            obj_vcall(counter, add, 2.);
        });
    }
    thr_syn_wait(&syn);
    thr_syn_wipe(&syn);

    /* Its value should be 3000 */
    val = obj_vcall(counter, get_value);
    Z_ASSERT_EQ(val, 3000.);

    MODULE_RELEASE(prometheus_client);

    Z_HELPER_END;
}

/* }}} */
/* {{{ gauge_value_thread_safety */

static int z_gauge_value_thread_safety(void)
{
    thr_syn_t syn;
    prom_gauge_t *gauge;
    double val;

    MODULE_REQUIRE(prometheus_client);

    /* Create a gauge */
    gauge = prom_gauge_new("test_gauge", "test gauge");

    /* Its value should be 0 */
    val = obj_vcall(gauge, get_value);
    Z_ASSERT_EQ(val, 0.);

    /* Modify its value from different threads */
    thr_syn_init(&syn);
    for (int i = 0; i < 1000; i++) {
        thr_syn_schedule_b(&syn, ^{
            obj_vcall(gauge, inc);
            obj_vcall(gauge, add, 6.);
            obj_vcall(gauge, sub, 2.);
            obj_vcall(gauge, dec);
            obj_vcall(gauge, dec);
        });
    }
    thr_syn_wait(&syn);
    thr_syn_wipe(&syn);

    /* Its value should be 3000 */
    val = obj_vcall(gauge, get_value);
    Z_ASSERT_EQ(val, 3000.);

    MODULE_RELEASE(prometheus_client);

    Z_HELPER_END;
}

/* }}} */
/* {{{ histogram_value_thread_safety */

static int z_histogram_value_thread_safety(void)
{
    const int nb_loops = 1000;
    thr_syn_t syn;
    prom_histogram_t *histogram;

    MODULE_REQUIRE(prometheus_client);

    /* Create a histogram */
    histogram = prom_histogram_new("test_histogram", "test histogram");
    prom_histogram_set_buckets(histogram, 10, 20, 50, 100);

    /* It should have 4 buckets, initialized to 0 */
    Z_ASSERT_EQ(histogram->nb_buckets, 4);
    Z_ASSERT_P(histogram->bucket_counts);
    for (int i = 0; i < 4; i++) {
        Z_ASSERT_ZERO(histogram->bucket_counts[i]);
    }

    /* Observe its value from different threads */
    thr_syn_init(&syn);
    for (int i = 0; i < nb_loops; i++) {
        thr_syn_schedule_b(&syn, ^{
            /* Twice in bucket 0 */
            obj_vcall(histogram, observe, 5);
            obj_vcall(histogram, observe, 10);
            /* Once in bucket 2 */
            obj_vcall(histogram, observe, 45);
            /* Once outside buckets */
            obj_vcall(histogram, observe, 101);
        });
    }
    thr_syn_wait(&syn);
    thr_syn_wipe(&syn);

    /* Check the values */
    Z_ASSERT_EQ(histogram->count, 4 * nb_loops);
    Z_ASSERT_EQ(histogram->sum, (5 + 10 + 45 + 101) * nb_loops);

    Z_ASSERT_EQ(histogram->bucket_counts[0], 2 * nb_loops);
    Z_ASSERT_EQ(histogram->bucket_counts[1], 2 * nb_loops);
    Z_ASSERT_EQ(histogram->bucket_counts[2], (2 + 1) * nb_loops);
    Z_ASSERT_EQ(histogram->bucket_counts[3], (2 + 1) * nb_loops);

    MODULE_RELEASE(prometheus_client);

    Z_HELPER_END;
}

/* }}} */

Z_GROUP_EXPORT(prometheus_client) {

    MODULE_REQUIRE(thr);

    Z_TEST(metrics_name, "test metrics name validation") {
#define T_OK(_name)  Z_ASSERT_N(prom_metric_check_name(LSTR(_name)))
#define T_KO(_name)  Z_ASSERT_NEG(prom_metric_check_name(LSTR(_name)))

        T_KO("");
        T_KO("123");
        T_KO("1basic_name");
        T_KO(" invalid_space");
        T_KO("invalid space");
        T_KO("invalid!character");

        T_OK("basic_name");
        T_OK("basic_name_1");
        T_OK("with:colon");
        T_OK(":withColon");
        T_OK("_leading_underscore");

#undef T_OK
#undef T_KO
    } Z_TEST_END;

    Z_TEST(metrics_label_name, "test metrics label name validation") {
#define T_OK(_name)  Z_ASSERT_N(prom_metric_check_label_name(_name))
#define T_KO(_name)  Z_ASSERT_NEG(prom_metric_check_label_name(_name))

        T_KO("");
        T_KO("__reserved");
        T_KO("123");
        T_KO("1basic_name");
        T_KO(" invalid_space");
        T_KO("invalid space");
        T_KO("invalid!character");
        T_KO("with:colon");

        T_OK("basic_name");
        T_OK("basic_name_1");
        T_OK("_leadingUnderscore");

#undef T_OK
#undef T_KO
    } Z_TEST_END;

    Z_TEST(single_value_metrics_basics,
           "test single value metrics metrics creation") {
        prom_counter_t *counter;
        prom_counter_t *counter_child;
        prom_gauge_t *gauge;
        prom_gauge_t *gauge_child;

        MODULE_REQUIRE(prometheus_client);

        /* Create a counter, and check its fields */
        counter = prom_counter_new("test_counter", "test counter",
                                   "label1", "label2");
        Z_ASSERT_LSTREQUAL(counter->name, LSTR("test_counter"));
        Z_ASSERT_LSTREQUAL(counter->documentation, LSTR("test counter"));
        Z_ASSERT_EQ(counter->label_names.len, 2);
        Z_ASSERT_STREQUAL(counter->label_names.tab[0], "label1");
        Z_ASSERT_STREQUAL(counter->label_names.tab[1], "label2");
        Z_ASSERT_EQ(counter->label_values.len, 0);
        Z_ASSERT_EQ(counter->value, 0.);

        /* Create a child, and check its fields */
        counter_child = prom_counter_labels(counter, "v1", "v2");
        Z_ASSERT(counter_child->parent == counter);
        Z_ASSERT_NULL(counter_child->name.s);
        Z_ASSERT_NULL(counter_child->documentation.s);
        Z_ASSERT_EQ(counter_child->label_names.len, 0);
        Z_ASSERT_EQ(counter_child->label_values.len, 2);
        Z_ASSERT_STREQUAL(counter_child->label_values.tab[0], "v1");
        Z_ASSERT_STREQUAL(counter_child->label_values.tab[1], "v2");
        Z_ASSERT_EQ(counter_child->value, 0.);

        /* Calling prom_counter_labels again with the same labels should
         * return the same pointer */
        Z_ASSERT(prom_counter_labels(counter, "v1", "v2") == counter_child);

        /* But with different values, it should return a different pointer */
        Z_ASSERT(prom_counter_labels(counter, "v1", "v3") != counter_child);

        /* Increment counter value */
        obj_vcall(counter_child, inc);
        obj_vcall(counter_child, add, 2.);
        Z_ASSERT_EQ(counter_child->value, 3.);
        Z_ASSERT_EQ(obj_vcall(counter_child, get_value), 3.);

        /* Remove child, an re-create it */
        prom_counter_remove(counter, "v1", "v2");
        counter_child = prom_counter_labels(counter, "v1", "v2");

        /* The value should be 0 */
        Z_ASSERT_EQ(counter_child->value, 0);
        obj_vcall(counter_child, add, 2.);

        /* Clear the parent (which will remove the child), and re-create the
         * child. The value should be 0 again. */
        obj_vcall(counter, clear);
        counter_child = prom_counter_labels(counter, "v1", "v2");
        Z_ASSERT_EQ(counter_child->value, 0);

        /* Create a gauge without labels */
        gauge = prom_gauge_new("gauge_without_labels",
                               "gauge without labels");
        Z_ASSERT_EQ(gauge->label_names.len, 0);
        Z_ASSERT_EQ(gauge->label_values.len, 0);

        /* Test gauge operations */
        Z_ASSERT_EQ(gauge->value, 0);
        obj_vcall(gauge, inc);
        Z_ASSERT_EQ(gauge->value, 1);
        obj_vcall(gauge, add, 0.5);
        Z_ASSERT_EQ(gauge->value, 1.5);
        obj_vcall(gauge, dec);
        Z_ASSERT_EQ(gauge->value, 0.5);
        obj_vcall(gauge, sub, 2.5);
        Z_ASSERT_EQ(gauge->value, -2);
        obj_vcall(gauge, set, -10);
        Z_ASSERT_EQ(gauge->value, -10);
        obj_delete(&gauge);

        /* Create a gauge with children */
        gauge = prom_gauge_new("test_gauge", "test gauge", "label");
        gauge_child = prom_gauge_labels(gauge, "label value");
        Z_ASSERT(gauge_child->parent == gauge);
        Z_ASSERT_EQ(gauge_child->label_names.len, 0);
        Z_ASSERT_EQ(gauge_child->label_values.len, 1);
        Z_ASSERT_STREQUAL(gauge_child->label_values.tab[0], "label value");

        MODULE_RELEASE(prometheus_client);
    } Z_TEST_END;

    Z_TEST(histogram_basics, "test histogram metrics creation") {
        const double default_buckets[] = { PROM_DEFAULT_BUCKETS };
        prom_histogram_t *histogram;
        prom_histogram_t *child;

        MODULE_REQUIRE(prometheus_client);

        /* Create an histogram without labels and with default buckets */
        histogram = prom_histogram_new("histogram_without_labels",
                                       "histogram without labels");
        prom_histogram_set_default_buckets(histogram);

        /* Check the buckets were properly initialized */
        Z_ASSERT_EQ(histogram->nb_buckets, countof(default_buckets));
        Z_ASSERT_P(histogram->bucket_upper_bounds);
        Z_ASSERT_P(histogram->bucket_counts);
        for (int i = 0; i < countof(default_buckets); i++) {
            Z_ASSERT_EQ(histogram->bucket_upper_bounds[i],
                        default_buckets[i]);
            Z_ASSERT_ZERO(histogram->bucket_counts[i]);
        }


        /* Now try an histogram with labels */
        histogram = prom_histogram_new("histogram_with_labels",
                                       "histogram with labels", "label");
        prom_histogram_set_default_buckets(histogram);

        /* It should have buckets upper bounds, but no values */
        Z_ASSERT_EQ(histogram->nb_buckets, countof(default_buckets));
        Z_ASSERT_P(histogram->bucket_upper_bounds);
        Z_ASSERT_NULL(histogram->bucket_counts);

        /* Create a child, and check it has bucket values */
        child = prom_histogram_labels(histogram, "label value");
        Z_ASSERT_P(child);
        Z_ASSERT_EQ(child->nb_buckets, countof(default_buckets));
        Z_ASSERT_NULL(child->bucket_upper_bounds);
        Z_ASSERT_P(child->bucket_counts);
        for (int i = 0; i < countof(default_buckets); i++) {
            Z_ASSERT_ZERO(child->bucket_counts[i]);
        }


        /* Test linear buckets creation */
        histogram = prom_histogram_new("histogram_linear",
                                       "histogram with linear buckets");
        prom_histogram_set_linear_buckets(histogram, -10, 10, 5);
        Z_ASSERT_EQ(histogram->nb_buckets, 5);
        Z_ASSERT_P(histogram->bucket_upper_bounds);
        Z_ASSERT_EQ(histogram->bucket_upper_bounds[0], -10);
        Z_ASSERT_EQ(histogram->bucket_upper_bounds[1],   0);
        Z_ASSERT_EQ(histogram->bucket_upper_bounds[2],  10);
        Z_ASSERT_EQ(histogram->bucket_upper_bounds[3],  20);
        Z_ASSERT_EQ(histogram->bucket_upper_bounds[4],  30);

        /* Test exponential buckets creation */
        histogram = prom_histogram_new("histogram_exponential",
                                       "histogram with exponential buckets");
        prom_histogram_set_exponential_buckets(histogram, 1, 10, 5);
        Z_ASSERT_EQ(histogram->nb_buckets, 5);
        Z_ASSERT_P(histogram->bucket_upper_bounds);
        Z_ASSERT_EQ(histogram->bucket_upper_bounds[0], 1);
        Z_ASSERT_EQ(histogram->bucket_upper_bounds[1], 10);
        Z_ASSERT_EQ(histogram->bucket_upper_bounds[2], 100);
        Z_ASSERT_EQ(histogram->bucket_upper_bounds[3], 1000);
        Z_ASSERT_EQ(histogram->bucket_upper_bounds[4], 10000);


        MODULE_RELEASE(prometheus_client);
    } Z_TEST_END;

    Z_TEST(metric_labels_thread_safety,
           "test thread safety of labels() method")
    {
        /* Not implemented directly here because of block rewriting issues */
        Z_HELPER_RUN(z_metric_labels_thread_safety());
    } Z_TEST_END;

    Z_TEST(counter_value_thread_safety,
           "test thread safety of counter value modification")
    {
        /* Not implemented directly here because of block rewriting issues */
        Z_HELPER_RUN(z_counter_value_thread_safety());
    } Z_TEST_END;

    Z_TEST(gauge_value_thread_safety,
           "test thread safety of gauge value modification")
    {
        /* Not implemented directly here because of block rewriting issues */
        Z_HELPER_RUN(z_gauge_value_thread_safety());
    } Z_TEST_END;

    Z_TEST(histogram_value_thread_safety,
           "test thread safety of histogram value modification")
    {
        /* Not implemented directly here because of block rewriting issues */
        Z_HELPER_RUN(z_histogram_value_thread_safety());
    } Z_TEST_END;

    Z_TEST(text_histogram_timer, "test prom_histogram_timer_scope") {
        prom_histogram_t *histo;

        MODULE_REQUIRE(prometheus_client);

        /* Create an histogram */
        histo = prom_histogram_new("histogram_timer", "test histogram timer");
        prom_histogram_set_default_buckets(histo);

        /* Use prom_histogram_timer_scope to measure the timing of a block
         * with a sleep of 1000 microseconds */
        {
            prom_histogram_timer_scope(histo);

            usleep(1000);
        }

        /* Check the timing was properly measured. We cannot expect an exact
         * value, so check realistic bounds. */
        Z_ASSERT_EQ(histo->count, 1);
        Z_ASSERT_GE(histo->sum, 0.001);
        Z_ASSERT_LT(histo->sum, 0.002);

        MODULE_RELEASE(prometheus_client);
    } Z_TEST_END;

    Z_TEST(text_exposition, "test the metrics exposition in text format") {
        t_scope;
        SB_1k(text);
        prom_counter_t *counter;
        prom_counter_t *counter_child;
        prom_gauge_t *gauge;
        prom_gauge_t *gauge_child;
        prom_histogram_t *histo;
        prom_histogram_t *histo_child;
        lstr_t expected;
        const char *path;

        MODULE_REQUIRE(prometheus_client);

        /* Add a simple counter with no labels */
        counter = prom_counter_new("zchk:counter_no_label",
                                   "Simple counter with no label");
        counter->value = 12345.5;

        /* Add a counter with two labels */
        counter = prom_counter_new("zchk:counter_with_labels",
                                   "A counter with two labels (and a \\ in "
                                   "its description)",
                                   "label_1", "label_2");
        counter_child = prom_counter_labels(counter, "value\n1", "value\\2");
        counter_child->value = 12;
        counter_child = prom_counter_labels(counter, "value 3", "value 4!");
        counter_child->value = 25;

        /* Add a simple gauge with no label */
        gauge = prom_gauge_new("zchk:gauge_no_label",
                               "Simple gauge with no label "
                               "(but a line break\nin its description)");
        gauge->value = 5000;

        /* Add a gauge with one label */
        gauge = prom_gauge_new("zchk:gauge_with_one_label",
                               "A gauge with two one label",
                               "aFunnyLabel");
        gauge_child = prom_gauge_labels(gauge, "funnyLabelValue");
        gauge_child->value = -12345.5;
        prom_gauge_labels(gauge, "non initialized value");

        /* Add a metric without samples */
        prom_gauge_new("zchk:gauge_without_samples",
                       "A gauge without samples",
                       "label");

        /* Add an histogram with no label */
        histo = prom_histogram_new("zchk:histogram_no_label",
                                   "Histogram with no label");
        prom_histogram_set_linear_buckets(histo, 10, 10, 3);
        obj_vcall(histo, observe, 5);
        obj_vcall(histo, observe, 10);
        obj_vcall(histo, observe, 12);
        obj_vcall(histo, observe, 27);
        obj_vcall(histo, observe, 30);
        obj_vcall(histo, observe, 200);

        /* Add an histogram with two labels */
        histo = prom_histogram_new("zchk:histogram_labels",
                                   "Histogram with two labels",
                                   "label1", "label2");
        prom_histogram_set_exponential_buckets(histo, 10, 10, 3);

        histo_child = prom_histogram_labels(histo, "value 1", "value 2");
        obj_vcall(histo_child, observe, -12);
        obj_vcall(histo_child, observe, 50);
        obj_vcall(histo_child, observe, 100);
        obj_vcall(histo_child, observe, 500);
        obj_vcall(histo_child, observe, 5000);

        histo_child = prom_histogram_labels(histo, "value 3", "value 4");

        /* Run the collector bridge function, to expose the declared metrics
         * as text. */
        prom_collector_bridge(&prom_collector_g, &text);

        /* Compare it with the expected result */
        path = t_fmt("%*pM/test-data/prometheus-client/"
                     "test-exposition-expected.txt",
                     LSTR_FMT_ARG(z_cmddir_g));
        Z_ASSERT_ZERO(lstr_init_from_file(&expected, path,
                                          PROT_READ, MAP_SHARED));
        Z_ASSERT_LSTREQUAL(LSTR_SB_V(&text), expected);
        lstr_wipe(&expected);

        MODULE_RELEASE(prometheus_client);
    } Z_TEST_END;

    MODULE_RELEASE(thr);

} Z_GROUP_END;

/* LCOV_EXCL_STOP */
