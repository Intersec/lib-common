/***************************************************************************/
/*                                                                         */
/* Copyright 2020 INTERSEC SA                                              */
/*                                                                         */
/* Licensed under the Apache License, Version 2.0 (the "License");         */
/* you may not use this file except in compliance with the License.        */
/* You may obtain a copy of the License at                                 */
/*                                                                         */
/*     http://www.apache.org/licenses/LICENSE-2.0                          */
/*                                                                         */
/* Unless required by applicable law or agreed to in writing, software     */
/* distributed under the License is distributed on an "AS IS" BASIS,       */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.*/
/* See the License for the specific language governing permissions and     */
/* limitations under the License.                                          */
/*                                                                         */
/***************************************************************************/

/* LCOV_EXCL_START */

#include <lib-common/el.h>
#include <lib-common/net.h>
#include <lib-common/unix.h>
#include <lib-common/z.h>

struct z_el_data {
    int  calls;
    bool end;
};

static int readall(el_t el, int fd, short ev, data_t priv)
{
    struct z_el_data *d = priv.ptr;
    byte buf[BUFSIZ];

    while (read(fd, buf, sizeof(buf)) > 0) {
        continue;
    }
    d->calls++;
    return 0;
}

static int writeall(el_t el, int fd, short ev, data_t priv)
{
    t_scope;
    struct z_el_data *d = priv.ptr;
    byte *data;
    socklen_t data_sz = sizeof(size_t);
    size_t bufsiz = 0;

    assert (ev & POLLOUT);

    if (d->end) {
        return 0;
    }

    assert (getsockopt(fd, SOL_SOCKET, SO_SNDBUF, &bufsiz, &data_sz) == 0);
    data = t_new(byte, bufsiz);

    while (write(fd, data, bufsiz) > 0) {
        continue;
    }
    d->calls++;
    return 0;
}

#ifdef HAVE_SYS_INOTIFY_H
static void fs_notify(el_t el, uint32_t event, uint32_t cookie,
                      lstr_t name, data_t data)
{
    (*(int *)data.ptr)++;
}
#endif

static int z_spawn_child(void)
{
    pid_t pid;
    const char *argv[] = { "-l", NULL };
    __block _Bool done = false;

    pid = el_spawn_child("ls", argv, NULL,
                         ^void (void) {
        devnull_dup(STDIN_FILENO);
        devnull_dup(STDOUT_FILENO);
    },
    ^void (el_t ev, pid_t _pid, int _st) {
        done = true;
    }, NULL);

    Z_ASSERT_N(pid);

    for (int i = 0; i < 10; i++) {
        el_loop_timeout(500);
        if (done) {
            return 0;
        }
    }
    Z_ASSERT(false, "timeout");

    Z_HELPER_END;
}

static int z_spawn_child_capture(void)
{
    pid_t pid;
    const char *argv[] = { "hello", NULL };
    __block lstr_t capture = LSTR_NULL_V;

    pid = el_spawn_child_capture("echo", argv, NULL, 0, NULL,
    ^void (el_t ev, pid_t _pid, int _st, lstr_t _capture) {
        capture = lstr_dup(_capture);
    }, NULL);

    Z_ASSERT_N(pid);

    for (int i = 0; i < 10; i++) {
        el_loop_timeout(500);
        if (capture.s) {
            lstr_t _capture = capture;

            Z_ASSERT_LSTREQUAL(_capture, LSTR("hello\n"));
            lstr_wipe(&capture);
            return 0;
        }
        usleep(1000);
    }
    Z_ASSERT(false, "timeout");

    Z_HELPER_END;
}

static int z_spawn_child_capture_timeout(void)
{
    pid_t pid;
    const char *argv[] = { "10", NULL };
    __block int status = 0;

    pid = el_spawn_child_capture("sleep", argv, NULL, 10, NULL,
    ^void (el_t ev, pid_t _pid, int _st, lstr_t _capture) {
        status = _st;
    }, NULL);

    Z_ASSERT_N(pid);

    for (int i = 0; i < 10; i++) {
        el_loop_timeout(500);
        if (status) {
            /* Program should have been interrupted because of a timeout. */
            int _status = status;

            Z_ASSERT_EQ(_status, SIGINT);
            return 0;
        }
        usleep(1000);
    }
    Z_ASSERT(false, "should have timedout");

    Z_HELPER_END;
}

Z_GROUP_EXPORT(el)
{
    Z_TEST(fd_priority, "el: priority") {
        t_scope;
        el_t *els   = t_new(el_t, 2 *3);
        struct z_el_data *calls = t_new(struct z_el_data, 3);

        for (int i = 0; i < 3; i++) {
            int fds[2];

            socketpairx(AF_UNIX, SOCK_STREAM, 0, O_NONBLOCK, fds);

            els[2 * i]     = el_fd_register(fds[0], true, POLLIN, &readall,
                                        &calls[i]);
            els[2 * i + 1] = el_fd_register(fds[1], true, POLLOUT, &writeall,
                                            &calls[i]);
        }

        el_loop_timeout(100);
        Z_ASSERT_EQ(1, calls[0].calls);
        Z_ASSERT_EQ(1, calls[1].calls);
        Z_ASSERT_EQ(1, calls[2].calls);
        el_loop_timeout(100);
        Z_ASSERT_EQ(2, calls[0].calls);
        Z_ASSERT_EQ(2, calls[1].calls);
        Z_ASSERT_EQ(2, calls[2].calls);

        el_fd_set_priority(els[2 * 2], HIGH);
        el_fd_set_priority(els[2 * 2 + 1], HIGH);
        for (int j = 0; j < 5; j++) {
            el_loop_timeout(100);
            Z_ASSERT_EQ(2, calls[0].calls);
            Z_ASSERT_EQ(2, calls[1].calls);
            Z_ASSERT_EQ(2 + (2 * j) + 1, calls[2].calls);

            el_loop_timeout(100);
            Z_ASSERT_EQ(2, calls[0].calls);
            Z_ASSERT_EQ(2, calls[1].calls);
            Z_ASSERT_EQ(2 + (2 * j) + 2, calls[2].calls);
        }

        calls[2].end = true;

        /* writeall will be callsed on 2, since POLLOUT is ok and it has HIGH
         * priority
         */
        Z_ASSERT_EQ(2, calls[0].calls);
        Z_ASSERT_EQ(2, calls[1].calls);
        Z_ASSERT_EQ(12, calls[2].calls);
        el_fd_set_mask(els[2 * 2 + 1], 0);


        el_fd_set_priority(els[1 * 2], LOW);
        el_fd_set_priority(els[1 * 2 + 1], LOW);

        el_loop_timeout(100);
        el_loop_timeout(100);
        Z_ASSERT_EQ(4, calls[0].calls);
        Z_ASSERT_EQ(2, calls[1].calls);
        Z_ASSERT_EQ(12, calls[2].calls);

        calls[0].end = true;
        el_fd_set_mask(els[0 * 2 + 1], 0);

        el_loop_timeout(100);
        el_loop_timeout(100);
        Z_ASSERT_EQ(4, calls[0].calls);
        Z_ASSERT_EQ(4, calls[1].calls);
        Z_ASSERT_EQ(12, calls[2].calls);

        for (int i = 0; i < 6; i++) {
            el_fd_unregister(&els[i]);
        }
    } Z_TEST_END;

#ifdef HAVE_SYS_INOTIFY_H
    Z_TEST(fs_watch, "el: inotify binding") {
        t_scope;
        el_t watch;
        int fd;
        int called = 0;

        watch = el_fs_watch_register(z_grpdir_g.s, IN_CREATE, fs_notify, &called);

        fd = open(t_fmt("%s/blah", z_grpdir_g.s),
                  O_WRONLY | O_CREAT, 0660);
        el_loop_timeout(100);
        Z_ASSERT_EQ(called, 1);
        close(fd);

        fd = open(t_fmt("%s/blah", z_grpdir_g.s),
                  O_WRONLY | O_CREAT, 0660);
        el_loop_timeout(100);
        Z_ASSERT_EQ(called, 1);
        close(fd);
        el_loop_timeout(100);
        Z_ASSERT_EQ(called, 1);

        el_fs_watch_change(watch, IN_OPEN | IN_CLOSE);


        fd = open(t_fmt("%s/blah2", z_grpdir_g.s), O_WRONLY | O_CREAT, 0660);
        el_loop_timeout(100);
        Z_ASSERT_EQ(called, 2);
        close(fd);
        el_loop_timeout(100);
        Z_ASSERT_EQ(called, 3);

        fd = open(t_fmt("%s/blah2", z_grpdir_g.s), O_WRONLY | O_CREAT, 0660);
        close(fd);
        el_loop_timeout(100);
        Z_ASSERT_EQ(called, 5);

        el_fs_watch_unregister(&watch);
    } Z_TEST_END;

    Z_TEST(fs_watch_delete, "el: inotify file unregister handling") {
        t_scope;
        el_t watch;
        el_t dummy_watch;
        int fd;
        int called = 0;
        int dummy_called = 0;
        char *filename  = t_fmt("%*pM/blah", LSTR_FMT_ARG(z_grpdir_g));
        char *dummy = t_fmt("%*pM/dummy", LSTR_FMT_ARG(z_grpdir_g));

        /* Create 2 file */
        fd = open(filename, O_CREAT, 0660);
        close(fd);
        fd = open(dummy, O_CREAT, 0660);
        close(fd);

        /* Add watch descriptors */
        watch = el_fs_watch_register(filename, IN_ALL_EVENTS, fs_notify,
                                     &called);
        dummy_watch = el_fs_watch_register(dummy, IN_ALL_EVENTS, fs_notify,
                                           &dummy_called);
        el_loop_timeout(100);
        Z_ASSERT_EQ(called, 0);

        /* Send 3 events */
        fd = open(filename, O_WRONLY, 0660);
        Z_ASSERT_N(write(fd, "coucou", strlen("coucou")));
        close(fd);

        /* Unregister watch */
        el_fs_watch_unregister(&watch);

        /* We get a panic here if the watcher removal isn't delayed */
        el_loop_timeout(100);

        Z_ASSERT_EQ(called, 0);

        unlink(filename);
        el_loop_timeout(100);
        Z_ASSERT_EQ(called, 0);

        el_fs_watch_unregister(&dummy_watch);
        el_loop_timeout(100);
        Z_ASSERT_EQ(dummy_called, 0);
    } Z_TEST_END;
#endif

    Z_TEST(spawn_child, "el: spawn child") {
        Z_HELPER_RUN(z_spawn_child());
    } Z_TEST_END;

    Z_TEST(spawn_child_capture, "el: spawn child capture") {
        Z_HELPER_RUN(z_spawn_child_capture());
        Z_HELPER_RUN(z_spawn_child_capture_timeout());
    } Z_TEST_END;
} Z_GROUP_END;

/* LCOV_EXCL_STOP */
