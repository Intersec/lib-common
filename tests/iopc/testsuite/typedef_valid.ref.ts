/***** THIS FILE IS AUTOGENERATED DO NOT MODIFY DIRECTLY ! *****/
/* tslint:disable */
/* eslint-disable */
import { ClassModel, StructModel, UnionModel } from 'iop/backbone/model';
import { IopCollection } from 'iop/backbone/collection';
import * as iop from 'iop/backbone';
const registerModel = iop.backbone.registerModel;
const registerCollection = iop.backbone.registerCollection;
import { Package as _IopCorePackage } from 'iop/core';
import JSON from 'json/typedef_valid.iop.json';
iop.load(JSON as _IopCorePackage);

import * as enum1 from 'iop/enum1.iop';
import * as typedef1 from 'iop/typedef1.iop';
import * as typedef2 from 'iop/typedef2.iop';
const MyStruct_fullname = 'typedef_valid.MyStruct';
export interface MyStruct {
    a: string;
    b: number;
    type1: string;
    type2: string;
    s1: typedef1.FooS;
    s2: typedef2.FooS;
    u1: typedef1.FooU;
    u2: typedef2.FooU;
    e1: typedef1.FooE;
    e2: typedef2.FooE;
}
export interface MyStruct_ModelParam {
    a: string;
    b: number;
    type1: string;
    type2: string;
    s1: typedef1.FooS_ModelParam | typedef1.FooS_Model;
    s2: typedef2.FooS_ModelParam | typedef2.FooS_Model;
    u1: typedef1.FooU_ModelParam | typedef1.FooU_Model;
    u2: typedef2.FooU_ModelParam | typedef2.FooU_Model;
    e1: typedef1.FooE_Str;
    e2: typedef2.FooE_Str;
}
export class MyStruct_Model extends StructModel<MyStruct_ModelParam> {
    public a: string;
    public b: number;
    public type1: string;
    public type2: string;
    public s1: typedef1.FooS_Model;
    public s2: typedef2.FooS_Model;
    public u1: typedef1.FooU_Model;
    public u2: typedef2.FooU_Model;
    public e1: typedef1.FooE_Str;
    public e2: typedef2.FooE_Str;
    public icQuery: (rpc: never) => never;
};
registerModel(MyStruct_Model, MyStruct_fullname);
export class MyStruct_Collection extends IopCollection<MyStruct_Model> {
    public icQuery: MyStruct_Model['icQuery'];
};
registerCollection<MyStruct_Model>(MyStruct_Collection, MyStruct_fullname);


export type MyUnion = { a: string }
    | { b: number }
    | { c: boolean };
export type MyUnion_Pairs = { kind: 'a', value: string }
    | { kind: 'b', value: number }
    | { kind: 'c', value: boolean };
export type MyUnion_Keys = 'a' | 'b' | 'c';
const MyUnion_fullname = 'typedef_valid.MyUnion';
export type MyUnion_ModelPairs = { kind: 'a', value: string }
    | { kind: 'b', value: number }
    | { kind: 'c', value: boolean };
export type MyUnion_ModelParam = { a: string }
    | { b: number }
    | { c: boolean };
export class MyUnion_Model extends UnionModel<MyUnion_Keys, MyUnion_ModelPairs, MyUnion_ModelParam> {
    public a: string | undefined;
    public b: number | undefined;
    public c: boolean | undefined;
};
registerModel(MyUnion_Model, MyUnion_fullname);
export class MyUnion_Collection extends IopCollection<MyUnion_Model> { };
registerCollection(MyUnion_Collection, MyUnion_fullname);

const A_fullname = 'typedef_valid.A';
export interface A {
    _class: string;
    a: string;
}
export interface A_ModelParam {
    a: string;
}
export class A_Model<Param extends A_ModelParam = A_ModelParam> extends ClassModel<Param> {
    public a: string;
    public icQuery: (rpc: never) => never;
};
registerModel(A_Model, A_fullname);
export class A_Collection<Model extends A_Model = A_Model> extends IopCollection<Model> {
    public icQuery: Model['icQuery'];
};
registerCollection<A_Model>(A_Collection, A_fullname);

const B_fullname = 'typedef_valid.B';
export interface B extends A {
}
export interface B_ModelParam extends A_ModelParam {
}
export class B_Model<Param extends B_ModelParam = B_ModelParam> extends A_Model<Param> {
    public icQuery: A_Model<Param>['icQuery'];
};
registerModel(B_Model, B_fullname);
export class B_Collection<Model extends B_Model = B_Model> extends A_Collection<Model> {
    public icQuery: Model['icQuery'];
};
registerCollection<B_Model>(B_Collection, B_fullname);

const TypedefStructUseAll_fullname = 'typedef_valid.TypedefStructUseAll';
export interface TypedefStructUseAll {
    ms: string;
    opt?: string;
    def: string;
    mst: string;
    mul: number | string;
    muldef: number | string;
    md: number;
    mddef: number;
    mddef2: number;
    mns: string;
    m3: number | string;
    m37: number | string;
    b310: number | string;
    msa: Array<string>;
    msa3: Array<string>;
    msa6: Array<string>;
    msa610: Array<string>;
    mnso?: string;
    mea: enum1.MyEnum;
    msal: MyStruct;
    mya: MyUnion;
    muab: MyUnion;
    muabc: MyUnion;
    muwc: MyUnion;
    muwcopt?: MyUnion;
    a: A;
    b: B;
}
export interface TypedefStructUseAll_ModelParam {
    ms: string;
    opt?: string;
    def?: string;
    mst: string;
    mul: number | string;
    muldef?: number | string;
    md: number;
    mddef?: number;
    mddef2?: number;
    mns: string;
    m3: number | string;
    m37?: number | string;
    b310: number | string;
    msa?: Array<string | string>;
    msa3?: Array<string | string>;
    msa6?: Array<string | string>;
    msa610?: Array<string | string>;
    mnso?: string;
    mea: enum1.MyEnum_Str;
    msal: MyStruct_ModelParam | MyStruct_Model;
    mya: MyUnion_ModelParam | MyUnion_Model;
    muab: MyUnion_ModelParam | MyUnion_Model;
    muabc: MyUnion_ModelParam | MyUnion_Model;
    muwc: MyUnion_ModelParam | MyUnion_Model;
    muwcopt?: MyUnion_ModelParam | MyUnion_Model;
    a: A_ModelParam | A_Model;
    b: B_ModelParam | B_Model;
}
export class TypedefStructUseAll_Model extends StructModel<TypedefStructUseAll_ModelParam> {
    public ms: string;
    public opt?: string;
    public def: string;
    public mst: string;
    public mul: number | string;
    public muldef: number | string;
    public md: number;
    public mddef: number;
    public mddef2: number;
    public mns: string;
    public m3: number | string;
    public m37: number | string;
    public b310: number | string;
    public msa: Array<string>;
    public msa3: Array<string>;
    public msa6: Array<string>;
    public msa610: Array<string>;
    public mnso?: string;
    public mea: enum1.MyEnum_Str;
    public msal: MyStruct_Model;
    public mya: MyUnion_Model;
    public muab: MyUnion_Model;
    public muabc: MyUnion_Model;
    public muwc: MyUnion_Model;
    public muwcopt?: MyUnion_Model;
    public a: A_Model;
    public b: B_Model;
    public icQuery: (rpc: never) => never;
};
registerModel(TypedefStructUseAll_Model, TypedefStructUseAll_fullname);
export class TypedefStructUseAll_Collection extends IopCollection<TypedefStructUseAll_Model> {
    public icQuery: TypedefStructUseAll_Model['icQuery'];
};
registerCollection<TypedefStructUseAll_Model>(TypedefStructUseAll_Collection, TypedefStructUseAll_fullname);


export type TypedefUnionUseAll = { ms: string }
    | { mul: number | string }
    | { mns: string }
    | { m3: number | string }
    | { b310: number | string }
    | { mea: enum1.MyEnum }
    | { msal: MyStruct }
    | { mya: MyUnion }
    | { muab: MyUnion }
    | { muabc: MyUnion }
    | { muwc: MyUnion }
    | { a: A }
    | { b: B };
export type TypedefUnionUseAll_Pairs = { kind: 'ms', value: string }
    | { kind: 'mul', value: number | string }
    | { kind: 'mns', value: string }
    | { kind: 'm3', value: number | string }
    | { kind: 'b310', value: number | string }
    | { kind: 'mea', value: enum1.MyEnum }
    | { kind: 'msal', value: MyStruct }
    | { kind: 'mya', value: MyUnion }
    | { kind: 'muab', value: MyUnion }
    | { kind: 'muabc', value: MyUnion }
    | { kind: 'muwc', value: MyUnion }
    | { kind: 'a', value: A }
    | { kind: 'b', value: B };
export type TypedefUnionUseAll_Keys = 'ms' | 'mul' | 'mns' | 'm3' | 'b310' | 'mea' | 'msal' | 'mya' | 'muab' | 'muabc' | 'muwc' | 'a' | 'b';
const TypedefUnionUseAll_fullname = 'typedef_valid.TypedefUnionUseAll';
export type TypedefUnionUseAll_ModelPairs = { kind: 'ms', value: string }
    | { kind: 'mul', value: number | string }
    | { kind: 'mns', value: string }
    | { kind: 'm3', value: number | string }
    | { kind: 'b310', value: number | string }
    | { kind: 'mea', value: enum1.MyEnum_Str }
    | { kind: 'msal', value: MyStruct_Model }
    | { kind: 'mya', value: MyUnion_Model }
    | { kind: 'muab', value: MyUnion_Model }
    | { kind: 'muabc', value: MyUnion_Model }
    | { kind: 'muwc', value: MyUnion_Model }
    | { kind: 'a', value: A_Model }
    | { kind: 'b', value: B_Model };
export type TypedefUnionUseAll_ModelParam = { ms: string }
    | { mul: number | string }
    | { mns: string }
    | { m3: number | string }
    | { b310: number | string }
    | { mea: enum1.MyEnum_Str }
    | { msal: MyStruct_ModelParam }
    | { msal: MyStruct_Model }
    | { mya: MyUnion_ModelParam }
    | { mya: MyUnion_Model }
    | { muab: MyUnion_ModelParam }
    | { muab: MyUnion_Model }
    | { muabc: MyUnion_ModelParam }
    | { muabc: MyUnion_Model }
    | { muwc: MyUnion_ModelParam }
    | { muwc: MyUnion_Model }
    | { a: A_ModelParam }
    | { a: A_Model }
    | { b: B_ModelParam }
    | { b: B_Model };
export class TypedefUnionUseAll_Model extends UnionModel<TypedefUnionUseAll_Keys, TypedefUnionUseAll_ModelPairs, TypedefUnionUseAll_ModelParam> {
    public ms: string | undefined;
    public mul: number | string | undefined;
    public mns: string | undefined;
    public m3: number | string | undefined;
    public b310: number | string | undefined;
    public mea: enum1.MyEnum_Str | undefined;
    public msal: MyStruct_Model | undefined;
    public mya: MyUnion_Model | undefined;
    public muab: MyUnion_Model | undefined;
    public muabc: MyUnion_Model | undefined;
    public muwc: MyUnion_Model | undefined;
    public a: A_Model | undefined;
    public b: B_Model | undefined;
};
registerModel(TypedefUnionUseAll_Model, TypedefUnionUseAll_fullname);
export class TypedefUnionUseAll_Collection extends IopCollection<TypedefUnionUseAll_Model> { };
registerCollection(TypedefUnionUseAll_Collection, TypedefUnionUseAll_fullname);

const C_fullname = 'typedef_valid.C';
export interface C extends B {
    b: string;
}
export interface C_ModelParam extends B_ModelParam {
    b: string;
}
export class C_Model<Param extends C_ModelParam = C_ModelParam> extends B_Model<Param> {
    public b: string;
    public icQuery: B_Model<Param>['icQuery'];
};
registerModel(C_Model, C_fullname);
export class C_Collection<Model extends C_Model = C_Model> extends B_Collection<Model> {
    public icQuery: Model['icQuery'];
};
registerCollection<C_Model>(C_Collection, C_fullname);

const RoutingHdr_fullname = 'typedef_valid.RoutingHdr';
export interface RoutingHdr {
    route: Route;
    originalHdr?: Hdr;
}
export interface RoutingHdr_ModelParam {
    route: Route_ModelParam | Route_Model;
    originalHdr?: Hdr_ModelParam | Hdr_Model;
}
export class RoutingHdr_Model extends StructModel<RoutingHdr_ModelParam> {
    public route: Route_Model;
    public originalHdr?: Hdr_Model;
    public icQuery: (rpc: never) => never;
};
registerModel(RoutingHdr_Model, RoutingHdr_fullname);
export class RoutingHdr_Collection extends IopCollection<RoutingHdr_Model> {
    public icQuery: RoutingHdr_Model['icQuery'];
};
registerCollection<RoutingHdr_Model>(RoutingHdr_Collection, RoutingHdr_fullname);

const Route_fullname = 'typedef_valid.Route';
export interface Route {
    _class: string;
}
export interface Route_ModelParam {
}
export class Route_Model<Param extends Route_ModelParam = Route_ModelParam> extends ClassModel<Param> {
    public icQuery: (rpc: never) => never;
};
registerModel(Route_Model, Route_fullname);
export class Route_Collection<Model extends Route_Model = Route_Model> extends IopCollection<Model> {
    public icQuery: Model['icQuery'];
};
registerCollection<Route_Model>(Route_Collection, Route_fullname);


export type Hdr = { simple: typedef1.FooS }
    | { routing: RoutingHdr };
export type Hdr_Pairs = { kind: 'simple', value: typedef1.FooS }
    | { kind: 'routing', value: RoutingHdr };
export type Hdr_Keys = 'simple' | 'routing';
const Hdr_fullname = 'typedef_valid.Hdr';
export type Hdr_ModelPairs = { kind: 'simple', value: typedef1.FooS_Model }
    | { kind: 'routing', value: RoutingHdr_Model };
export type Hdr_ModelParam = { simple: typedef1.FooS_ModelParam }
    | { simple: typedef1.FooS_Model }
    | { routing: RoutingHdr_ModelParam }
    | { routing: RoutingHdr_Model };
export class Hdr_Model extends UnionModel<Hdr_Keys, Hdr_ModelPairs, Hdr_ModelParam> {
    public simple: typedef1.FooS_Model | undefined;
    public routing: RoutingHdr_Model | undefined;
};
registerModel(Hdr_Model, Hdr_fullname);
export class Hdr_Collection extends IopCollection<Hdr_Model> { };
registerCollection(Hdr_Collection, Hdr_fullname);

const TypedefStructUseAllWithList_fullname = 'typedef_valid.TypedefStructUseAllWithList';
export interface TypedefStructUseAllWithList {
    listName: string;
    list: Array<TypedefStructUseAll>;
}
export interface TypedefStructUseAllWithList_ModelParam {
    listName: string;
    list?: Array<TypedefStructUseAll_ModelParam | TypedefStructUseAll_Model> | TypedefStructUseAll_Collection;
}
export class TypedefStructUseAllWithList_Model extends StructModel<TypedefStructUseAllWithList_ModelParam> {
    public listName: string;
    public list: TypedefStructUseAll_Collection;
    public icQuery: (rpc: never) => never;
};
registerModel(TypedefStructUseAllWithList_Model, TypedefStructUseAllWithList_fullname);
export class TypedefStructUseAllWithList_Collection extends IopCollection<TypedefStructUseAllWithList_Model> {
    public icQuery: TypedefStructUseAllWithList_Model['icQuery'];
};
registerCollection<TypedefStructUseAllWithList_Model>(TypedefStructUseAllWithList_Collection, TypedefStructUseAllWithList_fullname);


export namespace interfaces {
}

export type MyEnumAlias = enum1.MyEnum;
export type TypedefSimpleHdr = typedef1.FooS;
