/***** THIS FILE IS AUTOGENERATED DO NOT MODIFY DIRECTLY ! *****/
/* tslint:disable */
/* eslint-disable */
import { ClassModel, StructModel, UnionModel } from 'iop/backbone/model';
import { IopCollection } from 'iop/backbone/collection';
import * as iop from 'iop/backbone';
import { Enumeration } from 'iop/enumeration';
const enumeration = iop.enumeration;
const registerModel = iop.backbone.registerModel;
const registerCollection = iop.backbone.registerCollection;
import { Package as _IopCorePackage } from 'iop/core';
import JSON from 'json/tstjson.iop.json';
iop.load(JSON as _IopCorePackage);


export type MyEnumA_Int = 0
    | 1
    | 100
    | 101;
export type MyEnumA_Str = 'A'
    | 'B'
    | 'C'
    | 'D';
export type MyEnumA = MyEnumA_Str;
export interface MyEnumA_ModelIf extends Enumeration<MyEnumA_Str, MyEnumA_Int> {
    A: 'A';
    B: 'B';
    C: 'C';
    D: 'D';
}
export const MyEnumA_Model: MyEnumA_ModelIf = enumeration<MyEnumA_Str, MyEnumA_Int>('tstjson.MyEnumA') as any;

export type MyEnumB_Int = 0
    | 1
    | 2;
export type MyEnumB_Str = 'A'
    | 'B'
    | 'C';
export type MyEnumB = MyEnumB_Str;
export interface MyEnumB_ModelIf extends Enumeration<MyEnumB_Str, MyEnumB_Int> {
    A: 'A';
    B: 'B';
    C: 'C';
}
export const MyEnumB_Model: MyEnumB_ModelIf = enumeration<MyEnumB_Str, MyEnumB_Int>('tstjson.MyEnumB') as any;

export type MyEnumC_Int = 0
    | 1;
export type MyEnumC_Str = 'A'
    | 'B';
export type MyEnumC = MyEnumC_Str;
export interface MyEnumC_ModelIf extends Enumeration<MyEnumC_Str, MyEnumC_Int> {
    A: 'A';
    B: 'B';
}
export const MyEnumC_Model: MyEnumC_ModelIf = enumeration<MyEnumC_Str, MyEnumC_Int>('tstjson.MyEnumC') as any;

export type MyUnionA = { i: number }
    | { b: number }
    | { s: string };
export type MyUnionA_Pairs = { kind: 'i', value: number }
    | { kind: 'b', value: number }
    | { kind: 's', value: string };
export type MyUnionA_Keys = 'i' | 'b' | 's';
const MyUnionA_fullname = 'tstjson.MyUnionA';
export type MyUnionA_ModelPairs = { kind: 'i', value: number }
    | { kind: 'b', value: number }
    | { kind: 's', value: string };
export type MyUnionA_ModelParam = { i: number }
    | { b: number }
    | { s: string };
export class MyUnionA_Model extends UnionModel<MyUnionA_Keys, MyUnionA_ModelPairs, MyUnionA_ModelParam> {
    public i: number | undefined;
    public b: number | undefined;
    public s: string | undefined;
};
registerModel(MyUnionA_Model, MyUnionA_fullname);
export class MyUnionA_Collection extends IopCollection<MyUnionA_Model> { };
registerCollection(MyUnionA_Collection, MyUnionA_fullname);

const MyStructA_fullname = 'tstjson.MyStructA';
export interface MyStructA {
    i?: number;
    s?: string;
    u1: MyUnionA;
    u2: MyUnionA;
    u3: MyUnionA;
    class: number;
}
export interface MyStructA_ModelParam {
    i?: number;
    s?: string;
    u1: MyUnionA_ModelParam | MyUnionA_Model;
    u2: MyUnionA_ModelParam | MyUnionA_Model;
    u3: MyUnionA_ModelParam | MyUnionA_Model;
    class: number;
}
export class MyStructA_Model extends StructModel<MyStructA_ModelParam> {
    public i?: number;
    public s?: string;
    public u1: MyUnionA_Model;
    public u2: MyUnionA_Model;
    public u3: MyUnionA_Model;
    public class: number;
};
registerModel(MyStructA_Model, MyStructA_fullname);
export class MyStructA_Collection extends IopCollection<MyStructA_Model> { };
registerCollection<MyStructA_Model>(MyStructA_Collection, MyStructA_fullname);

const MyStructB_fullname = 'tstjson.MyStructB';
export interface MyStructB {
    a: number;
    b: number;
    c: number;
    d: number;
    e: number;
    f: number;
    g: number | string;
    h: number | string;
    i: number;
    j: boolean;
    k: string;
    l: string;
    m: MyEnumA;
    unionA: Array<MyUnionA>;
    structA: MyStructA;
    xmlField: string;
}
export interface MyStructB_ModelParam {
    a?: number;
    b?: number;
    c?: number;
    d?: number;
    e?: number;
    f?: number;
    g?: number | string;
    h?: number | string;
    i?: number;
    j?: boolean;
    k?: string;
    l?: string;
    m?: MyEnumA_Str;
    unionA?: Array<MyUnionA_ModelParam | MyUnionA_Model> | MyUnionA_Collection;
    structA: MyStructA_ModelParam | MyStructA_Model;
    xmlField: string;
}
export class MyStructB_Model extends StructModel<MyStructB_ModelParam> {
    public a: number;
    public b: number;
    public c: number;
    public d: number;
    public e: number;
    public f: number;
    public g: number | string;
    public h: number | string;
    public i: number;
    public j: boolean;
    public k: string;
    public l: string;
    public m: MyEnumA_Str;
    public unionA: MyUnionA_Collection;
    public structA: MyStructA_Model;
    public xmlField: string;
};
registerModel(MyStructB_Model, MyStructB_fullname);
export class MyStructB_Collection extends IopCollection<MyStructB_Model> { };
registerCollection<MyStructB_Model>(MyStructB_Collection, MyStructB_fullname);

const MyStructC_fullname = 'tstjson.MyStructC';
export interface MyStructC {
    a: number;
    b: number;
}
export interface MyStructC_ModelParam {
    a: number;
    b: number;
}
export class MyStructC_Model extends StructModel<MyStructC_ModelParam> {
    public a: number;
    public b: number;
};
registerModel(MyStructC_Model, MyStructC_fullname);
export class MyStructC_Collection extends IopCollection<MyStructC_Model> { };
registerCollection<MyStructC_Model>(MyStructC_Collection, MyStructC_fullname);


export type ConstraintU = { u8: number }
    | { u16: number }
    | { u32: number }
    | { u64: number | string }
    | { s: string };
export type ConstraintU_Pairs = { kind: 'u8', value: number }
    | { kind: 'u16', value: number }
    | { kind: 'u32', value: number }
    | { kind: 'u64', value: number | string }
    | { kind: 's', value: string };
export type ConstraintU_Keys = 'u8' | 'u16' | 'u32' | 'u64' | 's';
const ConstraintU_fullname = 'tstjson.ConstraintU';
export type ConstraintU_ModelPairs = { kind: 'u8', value: number }
    | { kind: 'u16', value: number }
    | { kind: 'u32', value: number }
    | { kind: 'u64', value: number | string }
    | { kind: 's', value: string };
export type ConstraintU_ModelParam = { u8: number }
    | { u16: number }
    | { u32: number }
    | { u64: number | string }
    | { s: string };
export class ConstraintU_Model extends UnionModel<ConstraintU_Keys, ConstraintU_ModelPairs, ConstraintU_ModelParam> {
    public u8: number | undefined;
    public u16: number | undefined;
    public u32: number | undefined;
    public u64: number | string | undefined;
    public s: string | undefined;
};
registerModel(ConstraintU_Model, ConstraintU_fullname);
export class ConstraintU_Collection extends IopCollection<ConstraintU_Model> { };
registerCollection(ConstraintU_Collection, ConstraintU_fullname);

const ConstraintS_fullname = 'tstjson.ConstraintS';
export interface ConstraintS {
    i8: Array<number>;
    i16: Array<number>;
    i32: Array<number>;
    i64: Array<number | string>;
    s: Array<string>;
    s2: string;
}
export interface ConstraintS_ModelParam {
    i8?: Array<number | number>;
    i16?: Array<number | number>;
    i32?: Array<number | number>;
    i64?: Array<number | string | number | string>;
    s?: Array<string | string>;
    s2: string;
}
export class ConstraintS_Model extends StructModel<ConstraintS_ModelParam> {
    public i8: Array<number>;
    public i16: Array<number>;
    public i32: Array<number>;
    public i64: Array<number | string>;
    public s: Array<string>;
    public s2: string;
};
registerModel(ConstraintS_Model, ConstraintS_fullname);
export class ConstraintS_Collection extends IopCollection<ConstraintS_Model> { };
registerCollection<ConstraintS_Model>(ConstraintS_Collection, ConstraintS_fullname);

const MyClassBase_fullname = 'tstjson.MyClassBase';
export interface MyClassBase {
    _class: string;
    a: number;
    structA: MyStructA;
}
export interface MyClassBase_ModelParam {
    a: number;
    structA: MyStructA_ModelParam | MyStructA_Model;
}
export class MyClassBase_Model<Param extends MyClassBase_ModelParam = MyClassBase_ModelParam> extends ClassModel<Param> {
    public a: number;
    public structA: MyStructA_Model;
};
registerModel(MyClassBase_Model, MyClassBase_fullname);
export class MyClassBase_Collection<Model extends MyClassBase_Model = MyClassBase_Model> extends IopCollection<Model> { };
registerCollection<MyClassBase_Model>(MyClassBase_Collection, MyClassBase_fullname);

const MyClassA_fullname = 'tstjson.MyClassA';
export interface MyClassA extends MyClassBase {
    b?: number;
    structB: Array<MyStructB>;
}
export interface MyClassA_ModelParam extends MyClassBase_ModelParam {
    b?: number;
    structB?: Array<MyStructB_ModelParam | MyStructB_Model> | MyStructB_Collection;
}
export class MyClassA_Model<Param extends MyClassA_ModelParam = MyClassA_ModelParam> extends MyClassBase_Model<Param> {
    public b?: number;
    public structB: MyStructB_Collection;
};
registerModel(MyClassA_Model, MyClassA_fullname);
export class MyClassA_Collection<Model extends MyClassA_Model = MyClassA_Model> extends MyClassBase_Collection<Model> { };
registerCollection<MyClassA_Model>(MyClassA_Collection, MyClassA_fullname);

const MyClassB_fullname = 'tstjson.MyClassB';
export interface MyClassB extends MyClassBase {
    val: number;
}
export interface MyClassB_ModelParam extends MyClassBase_ModelParam {
    val: number;
}
export class MyClassB_Model<Param extends MyClassB_ModelParam = MyClassB_ModelParam> extends MyClassBase_Model<Param> {
    public val: number;
};
registerModel(MyClassB_Model, MyClassB_fullname);
export class MyClassB_Collection<Model extends MyClassB_Model = MyClassB_Model> extends MyClassBase_Collection<Model> { };
registerCollection<MyClassB_Model>(MyClassB_Collection, MyClassB_fullname);

const MyClass1_fullname = 'tstjson.MyClass1';
export interface MyClass1 {
    _class: string;
}
export interface MyClass1_ModelParam {
}
export class MyClass1_Model<Param extends MyClass1_ModelParam = MyClass1_ModelParam> extends ClassModel<Param> {
};
registerModel(MyClass1_Model, MyClass1_fullname);
export class MyClass1_Collection<Model extends MyClass1_Model = MyClass1_Model> extends IopCollection<Model> { };
registerCollection<MyClass1_Model>(MyClass1_Collection, MyClass1_fullname);

const MyClass2_fullname = 'tstjson.MyClass2';
export interface MyClass2 extends MyClass1 {
}
export interface MyClass2_ModelParam extends MyClass1_ModelParam {
}
export class MyClass2_Model<Param extends MyClass2_ModelParam = MyClass2_ModelParam> extends MyClass1_Model<Param> {
};
registerModel(MyClass2_Model, MyClass2_fullname);
export class MyClass2_Collection<Model extends MyClass2_Model = MyClass2_Model> extends MyClass1_Collection<Model> { };
registerCollection<MyClass2_Model>(MyClass2_Collection, MyClass2_fullname);

const ClassContainer_fullname = 'tstjson.ClassContainer';
export interface ClassContainer {
    a: MyClassA;
    b: MyClassB;
}
export interface ClassContainer_ModelParam {
    a: MyClassA_ModelParam | MyClassA_Model;
    b: MyClassB_ModelParam | MyClassB_Model;
}
export class ClassContainer_Model extends StructModel<ClassContainer_ModelParam> {
    public a: MyClassA_Model;
    public b: MyClassB_Model;
};
registerModel(ClassContainer_Model, ClassContainer_fullname);
export class ClassContainer_Collection extends IopCollection<ClassContainer_Model> { };
registerCollection<ClassContainer_Model>(ClassContainer_Collection, ClassContainer_fullname);

const MyExceptionA_fullname = 'tstjson.MyExceptionA';
export interface MyExceptionA {
    errcode: number;
    desc: string;
}
export interface MyExceptionA_ModelParam {
    errcode: number;
    desc: string;
}
export class MyExceptionA_Model extends StructModel<MyExceptionA_ModelParam> {
    public errcode: number;
    public desc: string;
};
registerModel(MyExceptionA_Model, MyExceptionA_fullname);
export class MyExceptionA_Collection extends IopCollection<MyExceptionA_Model> { };
registerCollection<MyExceptionA_Model>(MyExceptionA_Collection, MyExceptionA_fullname);


export namespace interfaces {
    export namespace MyIfaceA {
        const funAArgs_fullname = 'tstjson.MyIfaceA.funAArgs';
        export interface funAArgs {
            a: number;
            b: MyStructA;
        }
        export interface funAArgs_ModelParam {
            a: number;
            b: MyStructA_ModelParam | MyStructA_Model;
        }
        export class funAArgs_Model extends StructModel<funAArgs_ModelParam> {
            public a: number;
            public b: MyStructA_Model;
        };
        registerModel(funAArgs_Model, funAArgs_fullname);
        export class funAArgs_Collection extends IopCollection<funAArgs_Model> { };
        registerCollection<funAArgs_Model>(funAArgs_Collection, funAArgs_fullname);
        const funARes_fullname = 'tstjson.MyIfaceA.funARes';
        export interface funARes {
            c: MyUnionA;
            d: number;
        }
        export interface funARes_ModelParam {
            c: MyUnionA_ModelParam | MyUnionA_Model;
            d: number;
        }
        export class funARes_Model extends StructModel<funARes_ModelParam> {
            public c: MyUnionA_Model;
            public d: number;
        };
        registerModel(funARes_Model, funARes_fullname);
        export class funARes_Collection extends IopCollection<funARes_Model> { };
        registerCollection<funARes_Model>(funARes_Collection, funARes_fullname);
        export type funAExn = void;
        export type funA = (a: number, b: MyStructA) => Promise<funARes>;

        export type funbArgs = void;
        const funbRes_fullname = 'tstjson.MyIfaceA.funbRes';
        export interface funbRes {
            a: number;
            b: number;
        }
        export interface funbRes_ModelParam {
            a: number;
            b: number;
        }
        export class funbRes_Model extends StructModel<funbRes_ModelParam> {
            public a: number;
            public b: number;
        };
        registerModel(funbRes_Model, funbRes_fullname);
        export class funbRes_Collection extends IopCollection<funbRes_Model> { };
        registerCollection<funbRes_Model>(funbRes_Collection, funbRes_fullname);
        export type funbExn = void;
        export type funb = () => Promise<funbRes>;

        export type funDArgs = void;
        export type funDRes = MyStructA;
        export type funDExn = void;
        export type funD = () => Promise<funDRes>;

        export type funCArgs = MyStructA;
        export type funCRes = MyStructB;
        export type funCExn = void;
        export type funC = (arg: MyStructA) => Promise<funCRes>;

        const funFArgs_fullname = 'tstjson.MyIfaceA.funFArgs';
        export interface funFArgs {
            a: Array<number>;
            b?: number;
        }
        export interface funFArgs_ModelParam {
            a?: Array<number | number>;
            b?: number;
        }
        export class funFArgs_Model extends StructModel<funFArgs_ModelParam> {
            public a: Array<number>;
            public b?: number;
        };
        registerModel(funFArgs_Model, funFArgs_fullname);
        export class funFArgs_Collection extends IopCollection<funFArgs_Model> { };
        registerCollection<funFArgs_Model>(funFArgs_Collection, funFArgs_fullname);
        export type funFRes = MyStructB;
        export type funFExn = void;
        export type funF = (a: Array<number>, b: number | undefined) => Promise<funFRes>;

        export type funGArgs = void;
        export type funGRes = void;
        export type funGExn = void;
        export type funG = () => Promise<void>;

        export type funHArgs = void;
        export type funHRes = void;
        export type funHExn = void;
        export type funH = () => Promise<void>;

        export type funIArgs = MyUnionA;
        export type funIRes = void;
        export type funIExn = void;
        export type funI = (arg: MyUnionA) => Promise<void>;

        export type funJArgs = MyStructA;
        const funJRes_fullname = 'tstjson.MyIfaceA.funJRes';
        export interface funJRes {
            a: number;
            b: number;
        }
        export interface funJRes_ModelParam {
            a: number;
            b: number;
        }
        export class funJRes_Model extends StructModel<funJRes_ModelParam> {
            public a: number;
            public b: number;
        };
        registerModel(funJRes_Model, funJRes_fullname);
        export class funJRes_Collection extends IopCollection<funJRes_Model> { };
        registerCollection<funJRes_Model>(funJRes_Collection, funJRes_fullname);
        const funJExn_fullname = 'tstjson.MyIfaceA.funJExn';
        export interface funJExn {
            err: number;
        }
        export interface funJExn_ModelParam {
            err: number;
        }
        export class funJExn_Model extends StructModel<funJExn_ModelParam> {
            public err: number;
        };
        registerModel(funJExn_Model, funJExn_fullname);
        export class funJExn_Collection extends IopCollection<funJExn_Model> { };
        registerCollection<funJExn_Model>(funJExn_Collection, funJExn_fullname);
        export type funJ = (arg: MyStructA) => Promise<funJRes>;

        export type funEArgs = void;
        const funERes_fullname = 'tstjson.MyIfaceA.funERes';
        export interface funERes {
            a?: number;
        }
        export interface funERes_ModelParam {
            a?: number;
        }
        export class funERes_Model extends StructModel<funERes_ModelParam> {
            public a?: number;
        };
        registerModel(funERes_Model, funERes_fullname);
        export class funERes_Collection extends IopCollection<funERes_Model> { };
        registerCollection<funERes_Model>(funERes_Collection, funERes_fullname);
        export type funEExn = void;
        export type funE = () => Promise<funERes>;

        export type funKArgs = MyStructA;
        const funKRes_fullname = 'tstjson.MyIfaceA.funKRes';
        export interface funKRes {
            a: number;
            b: number;
        }
        export interface funKRes_ModelParam {
            a: number;
            b: number;
        }
        export class funKRes_Model extends StructModel<funKRes_ModelParam> {
            public a: number;
            public b: number;
        };
        registerModel(funKRes_Model, funKRes_fullname);
        export class funKRes_Collection extends IopCollection<funKRes_Model> { };
        registerCollection<funKRes_Model>(funKRes_Collection, funKRes_fullname);
        export type funKExn = MyExceptionA;
        export type funK = (arg: MyStructA) => Promise<funKRes>;

        const funLArgs_fullname = 'tstjson.MyIfaceA.funLArgs';
        export interface funLArgs {
            a: number;
            b: number;
            c: number;
        }
        export interface funLArgs_ModelParam {
            a: number;
            b: number;
            c: number;
        }
        export class funLArgs_Model extends StructModel<funLArgs_ModelParam> {
            public a: number;
            public b: number;
            public c: number;
        };
        registerModel(funLArgs_Model, funLArgs_fullname);
        export class funLArgs_Collection extends IopCollection<funLArgs_Model> { };
        registerCollection<funLArgs_Model>(funLArgs_Collection, funLArgs_fullname);
        export type funLRes = void;
        export type funLExn = void;
        export type funL = (a: number, b: number, c: number) => Promise<void>;

        const funAsyncArgs_fullname = 'tstjson.MyIfaceA.funAsyncArgs';
        export interface funAsyncArgs {
            type: number;
        }
        export interface funAsyncArgs_ModelParam {
            type: number;
        }
        export class funAsyncArgs_Model extends StructModel<funAsyncArgs_ModelParam> {
            public type: number;
        };
        registerModel(funAsyncArgs_Model, funAsyncArgs_fullname);
        export class funAsyncArgs_Collection extends IopCollection<funAsyncArgs_Model> { };
        registerCollection<funAsyncArgs_Model>(funAsyncArgs_Collection, funAsyncArgs_fullname);
        export type funAsyncRes = void;
        export type funAsyncExn = void;
        export type funAsync = (type: number) => void;

    }
    export namespace MyIfaceB {
        const funAArgs_fullname = 'tstjson.MyIfaceB.funAArgs';
        export interface funAArgs {
            i: number;
        }
        export interface funAArgs_ModelParam {
            i: number;
        }
        export class funAArgs_Model extends StructModel<funAArgs_ModelParam> {
            public i: number;
        };
        registerModel(funAArgs_Model, funAArgs_fullname);
        export class funAArgs_Collection extends IopCollection<funAArgs_Model> { };
        registerCollection<funAArgs_Model>(funAArgs_Collection, funAArgs_fullname);
        const funARes_fullname = 'tstjson.MyIfaceB.funARes';
        export interface funARes {
            i: number;
        }
        export interface funARes_ModelParam {
            i: number;
        }
        export class funARes_Model extends StructModel<funARes_ModelParam> {
            public i: number;
        };
        registerModel(funARes_Model, funARes_fullname);
        export class funARes_Collection extends IopCollection<funARes_Model> { };
        registerCollection<funARes_Model>(funARes_Collection, funARes_fullname);
        export type funAExn = void;
        export type funA = (i: number) => Promise<funARes>;

    }
    export namespace MyIfaceC {
        const funAArgs_fullname = 'tstjson.MyIfaceC.funAArgs';
        export interface funAArgs {
            i: number;
        }
        export interface funAArgs_ModelParam {
            i: number;
        }
        export class funAArgs_Model extends StructModel<funAArgs_ModelParam> {
            public i: number;
        };
        registerModel(funAArgs_Model, funAArgs_fullname);
        export class funAArgs_Collection extends IopCollection<funAArgs_Model> { };
        registerCollection<funAArgs_Model>(funAArgs_Collection, funAArgs_fullname);
        const funARes_fullname = 'tstjson.MyIfaceC.funARes';
        export interface funARes {
            i: number;
        }
        export interface funARes_ModelParam {
            i: number;
        }
        export class funARes_Model extends StructModel<funARes_ModelParam> {
            public i: number;
        };
        registerModel(funARes_Model, funARes_fullname);
        export class funARes_Collection extends IopCollection<funARes_Model> { };
        registerCollection<funARes_Model>(funARes_Collection, funARes_fullname);
        export type funAExn = void;
        export type funA = (i: number) => Promise<funARes>;

    }
    export namespace MyIfaceD {
        const funAArgs_fullname = 'tstjson.MyIfaceD.funAArgs';
        export interface funAArgs {
            i: number;
        }
        export interface funAArgs_ModelParam {
            i: number;
        }
        export class funAArgs_Model extends StructModel<funAArgs_ModelParam> {
            public i: number;
        };
        registerModel(funAArgs_Model, funAArgs_fullname);
        export class funAArgs_Collection extends IopCollection<funAArgs_Model> { };
        registerCollection<funAArgs_Model>(funAArgs_Collection, funAArgs_fullname);
        const funARes_fullname = 'tstjson.MyIfaceD.funARes';
        export interface funARes {
            i: number;
        }
        export interface funARes_ModelParam {
            i: number;
        }
        export class funARes_Model extends StructModel<funARes_ModelParam> {
            public i: number;
        };
        registerModel(funARes_Model, funARes_fullname);
        export class funARes_Collection extends IopCollection<funARes_Model> { };
        registerCollection<funARes_Model>(funARes_Collection, funARes_fullname);
        export type funAExn = void;
        export type funA = (i: number) => Promise<funARes>;

    }
}
