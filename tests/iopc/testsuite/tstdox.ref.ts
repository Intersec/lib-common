/***** THIS FILE IS AUTOGENERATED DO NOT MODIFY DIRECTLY ! *****/
/* tslint:disable */
/* eslint-disable */

export type MyEnumA_Int = 0
    | 1
    | 2;
export type MyEnumA_Str = 'VAL_A'
    | 'VAL_B'
    | 'VAL_C';
export type MyEnumA = MyEnumA_Str;

export type MyEnumB_Int = 0
    | 1
    | 2;
export type MyEnumB_Str = 'VAL_A'
    | 'VAL_B'
    | 'VAL_C';
export type MyEnumB = MyEnumB_Str;

export type MyEnumC_Int = 0;
export type MyEnumC_Str = 'VAL_A';
export type MyEnumC = MyEnumC_Str;

export type MyEnumD_Int = 0
    | 1
    | 2;
export type MyEnumD_Str = 'VAL_A'
    | 'VAL_B'
    | 'VAL_C';
export type MyEnumD = MyEnumD_Str;
const MyStructA_fullname = 'tstdox.MyStructA';
export interface MyStructA {
    fieldA: number;
    fieldB: number;
    fieldC: number;
}

const MyStructB_fullname = 'tstdox.MyStructB';
export interface MyStructB {
    i: number;
    j: number;
}

const CDataTest_fullname = 'tstdox.CDataTest';
export interface CDataTest {
    sfield: string;
}

const MyStructAa_fullname = 'tstdox.MyStructAa';
export interface MyStructAa {
    fieldA: number;
    fieldB: number;
    fieldC: number;
}

const MyStructAb_fullname = 'tstdox.MyStructAb';
export interface MyStructAb {
    fieldA: number;
    fieldB: number;
    fieldC: number;
}

const MyStructAc_fullname = 'tstdox.MyStructAc';
export interface MyStructAc {
    fieldA: number;
    fieldB: number;
    fieldC: number;
}

const MyStructBa_fullname = 'tstdox.MyStructBa';
export interface MyStructBa {
    i: number;
    j: number;
}

const MyStructBb_fullname = 'tstdox.MyStructBb';
export interface MyStructBb {
    i: number;
    j: number;
}

const SortField_fullname = 'tstdox.SortField';
export interface SortField {
    pos: number;
}

const MyClassBase_fullname = 'tstdox.MyClassBase';
export interface MyClassBase {
    _class: string;
}

const MyClassA_fullname = 'tstdox.MyClassA';
export interface MyClassA extends MyClassBase {
}

const MyClass1_fullname = 'tstdox.MyClass1';
export interface MyClass1 {
    _class: string;
}

const MyClass2_fullname = 'tstdox.MyClass2';
export interface MyClass2 extends MyClass1 {
}


export namespace interfaces {
    export namespace MyIfaceA {
        const funAArgs_fullname = 'tstdox.MyIfaceA.funAArgs';
        export interface funAArgs {
            aParam: number;
            b: MyStructAa;
        }
        const funARes_fullname = 'tstdox.MyIfaceA.funARes';
        export interface funARes {
            c: MyStructA;
            d: number;
        }
        export type funAExn = MyStructAc;
        export type funA = (aParam: number, b: MyStructAa) => Promise<funARes>;

        const funAaArgs_fullname = 'tstdox.MyIfaceA.funAaArgs';
        export interface funAaArgs {
            a: number;
        }
        const funAaRes_fullname = 'tstdox.MyIfaceA.funAaRes';
        export interface funAaRes {
            b: number;
        }
        export type funAaExn = void;
        export type funAa = (a: number) => Promise<funAaRes>;

        const funBArgs_fullname = 'tstdox.MyIfaceA.funBArgs';
        export interface funBArgs {
            a: number;
        }
        export type funBRes = MyStructA;
        export type funBExn = void;
        export type funB = (a: number) => Promise<funBRes>;

        export type funCArgs = MyStructA;
        const funCRes_fullname = 'tstdox.MyIfaceA.funCRes';
        export interface funCRes {
            b: number;
        }
        export type funCExn = void;
        export type funC = (arg: MyStructA) => Promise<funCRes>;

        export type funDArgs = void;
        const funDRes_fullname = 'tstdox.MyIfaceA.funDRes';
        export interface funDRes {
            b: number;
        }
        export type funDExn = void;
        export type funD = () => Promise<funDRes>;

        const funEArgs_fullname = 'tstdox.MyIfaceA.funEArgs';
        export interface funEArgs {
            a: number;
        }
        export type funERes = void;
        export type funEExn = void;
        export type funE = (a: number) => Promise<void>;

    }
    export namespace MyIfaceB {
        const funAArgs_fullname = 'tstdox.MyIfaceB.funAArgs';
        export interface funAArgs {
            i: number;
        }
        export type funARes = void;
        export type funAExn = void;
        export type funA = (i: number) => Promise<void>;

        const funBArgs_fullname = 'tstdox.MyIfaceB.funBArgs';
        export interface funBArgs {
            j: number;
        }
        export type funBRes = void;
        export type funBExn = void;
        export type funB = (j: number) => Promise<void>;

    }
    export namespace MyIfaceC {
        const funAArgs_fullname = 'tstdox.MyIfaceC.funAArgs';
        export interface funAArgs {
            i: number;
        }
        export type funARes = void;
        export type funAExn = void;
        export type funA = (i: number) => Promise<void>;

        const funBArgs_fullname = 'tstdox.MyIfaceC.funBArgs';
        export interface funBArgs {
            j: number;
        }
        export type funBRes = void;
        export type funBExn = void;
        export type funB = (j: number) => Promise<void>;

    }
    export namespace MyIfaceD {
        const funAArgs_fullname = 'tstdox.MyIfaceD.funAArgs';
        export interface funAArgs {
            i: number;
        }
        export type funARes = void;
        export type funAExn = void;
        export type funA = (i: number) => Promise<void>;

        const funBArgs_fullname = 'tstdox.MyIfaceD.funBArgs';
        export interface funBArgs {
            j: number;
        }
        export type funBRes = void;
        export type funBExn = void;
        export type funB = (j: number) => Promise<void>;

    }
}
