/***** THIS FILE IS AUTOGENERATED DO NOT MODIFY DIRECTLY ! *****/
/* tslint:disable */
/* eslint-disable */
import Backbone from 'backbone';
import { ClassModel, StructModel } from 'iop/backbone/model';
import { IopCollection } from 'iop/backbone/collection';
import * as iop from 'iop/backbone';
import { Enumeration } from 'iop/enumeration';
const enumeration = iop.enumeration;
const registerModel = iop.backbone.registerModel;
const registerCollection = iop.backbone.registerCollection;
import { Package as _IopCorePackage } from 'iop/core';
import JSON from 'json/tstdox.iop.json';
iop.load(JSON as _IopCorePackage);

import * as tstgen from 'iop/tstgen.iop';

export type MyEnumA_Int = 0
    | 1
    | 2;
export type MyEnumA_Str = 'VAL_A'
    | 'VAL_B'
    | 'VAL_C';
export type MyEnumA = MyEnumA_Str;
export interface MyEnumA_ModelIf extends Enumeration<MyEnumA_Str, MyEnumA_Int> {
    VAL_A: 'VAL_A';
    VAL_B: 'VAL_B';
    VAL_C: 'VAL_C';
}
export const MyEnumA_Model: MyEnumA_ModelIf = enumeration<MyEnumA_Str, MyEnumA_Int>('tstdox.MyEnumA') as any;

export type MyEnumB_Int = 0
    | 1
    | 2;
export type MyEnumB_Str = 'VAL_A'
    | 'VAL_B'
    | 'VAL_C';
export type MyEnumB = MyEnumB_Str;
export interface MyEnumB_ModelIf extends Enumeration<MyEnumB_Str, MyEnumB_Int> {
    VAL_A: 'VAL_A';
    VAL_B: 'VAL_B';
    VAL_C: 'VAL_C';
}
export const MyEnumB_Model: MyEnumB_ModelIf = enumeration<MyEnumB_Str, MyEnumB_Int>('tstdox.MyEnumB') as any;

export type MyEnumC_Int = 0;
export type MyEnumC_Str = 'VAL_A';
export type MyEnumC = MyEnumC_Str;
export interface MyEnumC_ModelIf extends Enumeration<MyEnumC_Str, MyEnumC_Int> {
    VAL_A: 'VAL_A';
}
export const MyEnumC_Model: MyEnumC_ModelIf = enumeration<MyEnumC_Str, MyEnumC_Int>('tstdox.MyEnumC') as any;

export type MyEnumD_Int = 0
    | 1
    | 2;
export type MyEnumD_Str = 'VAL_A'
    | 'VAL_B'
    | 'VAL_C';
export type MyEnumD = MyEnumD_Str;
export interface MyEnumD_ModelIf extends Enumeration<MyEnumD_Str, MyEnumD_Int> {
    VAL_A: 'VAL_A';
    VAL_B: 'VAL_B';
    VAL_C: 'VAL_C';
}
export const MyEnumD_Model: MyEnumD_ModelIf = enumeration<MyEnumD_Str, MyEnumD_Int>('tstdox.MyEnumD') as any;
const MyStructA_fullname = 'tstdox.MyStructA';
export interface MyStructA {
    fieldA: number;
    fieldB: number;
    fieldC: number;
}
export interface MyStructA_ModelParam {
    fieldA: number;
    fieldB: number;
    fieldC: number;
}
export class MyStructA_Model extends StructModel<MyStructA_ModelParam> {
    public fieldA: number;
    public fieldB: number;
    public fieldC: number;
    public icQuery: (rpc: never) => never;
};
registerModel(MyStructA_Model, MyStructA_fullname);
export class MyStructA_Collection extends IopCollection<MyStructA_Model> {
    public icQuery: MyStructA_Model['icQuery'];
};
registerCollection<MyStructA_Model>(MyStructA_Collection, MyStructA_fullname);

const MyStructB_fullname = 'tstdox.MyStructB';
export interface MyStructB {
    i: number;
    j: number;
}
export interface MyStructB_ModelParam {
    i: number;
    j: number;
}
export class MyStructB_Model extends StructModel<MyStructB_ModelParam> {
    public i: number;
    public j: number;
    public icQuery: (rpc: never) => never;
};
registerModel(MyStructB_Model, MyStructB_fullname);
export class MyStructB_Collection extends IopCollection<MyStructB_Model> {
    public icQuery: MyStructB_Model['icQuery'];
};
registerCollection<MyStructB_Model>(MyStructB_Collection, MyStructB_fullname);

const CDataTest_fullname = 'tstdox.CDataTest';
export interface CDataTest {
    sfield: string;
}
export interface CDataTest_ModelParam {
    sfield: string;
}
export class CDataTest_Model extends StructModel<CDataTest_ModelParam> {
    public sfield: string;
    public icQuery: (rpc: never) => never;
};
registerModel(CDataTest_Model, CDataTest_fullname);
export class CDataTest_Collection extends IopCollection<CDataTest_Model> {
    public icQuery: CDataTest_Model['icQuery'];
};
registerCollection<CDataTest_Model>(CDataTest_Collection, CDataTest_fullname);

const MyStructAa_fullname = 'tstdox.MyStructAa';
export interface MyStructAa {
    fieldA: number;
    fieldB: number;
    fieldC: number;
}
export interface MyStructAa_ModelParam {
    fieldA: number;
    fieldB: number;
    fieldC: number;
}
export class MyStructAa_Model extends StructModel<MyStructAa_ModelParam> {
    public fieldA: number;
    public fieldB: number;
    public fieldC: number;
    public icQuery: (rpc: never) => never;
};
registerModel(MyStructAa_Model, MyStructAa_fullname);
export class MyStructAa_Collection extends IopCollection<MyStructAa_Model> {
    public icQuery: MyStructAa_Model['icQuery'];
};
registerCollection<MyStructAa_Model>(MyStructAa_Collection, MyStructAa_fullname);

const MyStructAb_fullname = 'tstdox.MyStructAb';
export interface MyStructAb {
    fieldA: number;
    fieldB: number;
    fieldC: number;
}
export interface MyStructAb_ModelParam {
    fieldA: number;
    fieldB: number;
    fieldC: number;
}
export class MyStructAb_Model extends StructModel<MyStructAb_ModelParam> {
    public fieldA: number;
    public fieldB: number;
    public fieldC: number;
    public icQuery: (rpc: never) => never;
};
registerModel(MyStructAb_Model, MyStructAb_fullname);
export class MyStructAb_Collection extends IopCollection<MyStructAb_Model> {
    public icQuery: MyStructAb_Model['icQuery'];
};
registerCollection<MyStructAb_Model>(MyStructAb_Collection, MyStructAb_fullname);

const MyStructAc_fullname = 'tstdox.MyStructAc';
export interface MyStructAc {
    fieldA: number;
    fieldB: number;
    fieldC: number;
}
export interface MyStructAc_ModelParam {
    fieldA: number;
    fieldB: number;
    fieldC: number;
}
export class MyStructAc_Model extends StructModel<MyStructAc_ModelParam> {
    public fieldA: number;
    public fieldB: number;
    public fieldC: number;
    public icQuery: (rpc: never) => never;
};
registerModel(MyStructAc_Model, MyStructAc_fullname);
export class MyStructAc_Collection extends IopCollection<MyStructAc_Model> {
    public icQuery: MyStructAc_Model['icQuery'];
};
registerCollection<MyStructAc_Model>(MyStructAc_Collection, MyStructAc_fullname);

const MyStructBa_fullname = 'tstdox.MyStructBa';
export interface MyStructBa {
    i: number;
    j: number;
}
export interface MyStructBa_ModelParam {
    i: number;
    j: number;
}
export class MyStructBa_Model extends StructModel<MyStructBa_ModelParam> {
    public i: number;
    public j: number;
    public icQuery: (rpc: never) => never;
};
registerModel(MyStructBa_Model, MyStructBa_fullname);
export class MyStructBa_Collection extends IopCollection<MyStructBa_Model> {
    public icQuery: MyStructBa_Model['icQuery'];
};
registerCollection<MyStructBa_Model>(MyStructBa_Collection, MyStructBa_fullname);

const MyStructBb_fullname = 'tstdox.MyStructBb';
export interface MyStructBb {
    i: number;
    j: number;
}
export interface MyStructBb_ModelParam {
    i: number;
    j: number;
}
export class MyStructBb_Model extends StructModel<MyStructBb_ModelParam> {
    public i: number;
    public j: number;
    public icQuery: (rpc: never) => never;
};
registerModel(MyStructBb_Model, MyStructBb_fullname);
export class MyStructBb_Collection extends IopCollection<MyStructBb_Model> {
    public icQuery: MyStructBb_Model['icQuery'];
};
registerCollection<MyStructBb_Model>(MyStructBb_Collection, MyStructBb_fullname);

const SortField_fullname = 'tstdox.SortField';
export interface SortField {
    pos: number;
}
export interface SortField_ModelParam {
    pos: number;
}
export class SortField_Model extends StructModel<SortField_ModelParam> {
    public pos: number;
    public icQuery: (rpc: never) => never;
};
registerModel(SortField_Model, SortField_fullname);
export class SortField_Collection extends IopCollection<SortField_Model> {
    public icQuery: SortField_Model['icQuery'];
};
registerCollection<SortField_Model>(SortField_Collection, SortField_fullname);

const MyClassBase_fullname = 'tstdox.MyClassBase';
export interface MyClassBase {
    _class: string;
}
export interface MyClassBase_ModelParam {
}
export class MyClassBase_Model<Param extends MyClassBase_ModelParam = MyClassBase_ModelParam> extends ClassModel<Param> {
    public icQuery: (rpc: never) => never;
};
registerModel(MyClassBase_Model, MyClassBase_fullname);
export class MyClassBase_Collection<Model extends MyClassBase_Model = MyClassBase_Model> extends IopCollection<Model> {
    public icQuery: Model['icQuery'];
};
registerCollection<MyClassBase_Model>(MyClassBase_Collection, MyClassBase_fullname);

const MyClassA_fullname = 'tstdox.MyClassA';
export interface MyClassA extends MyClassBase {
}
export interface MyClassA_ModelParam extends MyClassBase_ModelParam {
}
export class MyClassA_Model<Param extends MyClassA_ModelParam = MyClassA_ModelParam> extends MyClassBase_Model<Param> {
    public icQuery: MyClassBase_Model<Param>['icQuery']
        & tstgen.interfaces.MyIfaceA.IcQuery;
};
registerModel(MyClassA_Model, MyClassA_fullname);
export class MyClassA_Collection<Model extends MyClassA_Model = MyClassA_Model> extends MyClassBase_Collection<Model> {
    public icQuery: Model['icQuery'];
};
registerCollection<MyClassA_Model>(MyClassA_Collection, MyClassA_fullname);

const MyClass1_fullname = 'tstdox.MyClass1';
export interface MyClass1 {
    _class: string;
}
export interface MyClass1_ModelParam {
}
export class MyClass1_Model<Param extends MyClass1_ModelParam = MyClass1_ModelParam> extends ClassModel<Param> {
    public icQuery: (rpc: never) => never;
};
registerModel(MyClass1_Model, MyClass1_fullname);
export class MyClass1_Collection<Model extends MyClass1_Model = MyClass1_Model> extends IopCollection<Model> {
    public icQuery: Model['icQuery'];
};
registerCollection<MyClass1_Model>(MyClass1_Collection, MyClass1_fullname);

const MyClass2_fullname = 'tstdox.MyClass2';
export interface MyClass2 extends MyClass1 {
}
export interface MyClass2_ModelParam extends MyClass1_ModelParam {
}
export class MyClass2_Model<Param extends MyClass2_ModelParam = MyClass2_ModelParam> extends MyClass1_Model<Param> {
    public icQuery: MyClass1_Model<Param>['icQuery'];
};
registerModel(MyClass2_Model, MyClass2_fullname);
export class MyClass2_Collection<Model extends MyClass2_Model = MyClass2_Model> extends MyClass1_Collection<Model> {
    public icQuery: Model['icQuery'];
};
registerCollection<MyClass2_Model>(MyClass2_Collection, MyClass2_fullname);


export namespace interfaces {
    export namespace MyIfaceA {
        const funAArgs_fullname = 'tstdox.MyIfaceA.funAArgs';
        export interface funAArgs {
            aParam: number;
            b: MyStructAa;
        }
        export interface funAArgs_ModelParam {
            aParam: number;
            b: MyStructAa_ModelParam | MyStructAa_Model;
        }
        export class funAArgs_Model extends StructModel<funAArgs_ModelParam> {
            public aParam: number;
            public b: MyStructAa_Model;
            public icQuery: (rpc: never) => never;
        };
        registerModel(funAArgs_Model, funAArgs_fullname);
        export class funAArgs_Collection extends IopCollection<funAArgs_Model> {
            public icQuery: funAArgs_Model['icQuery'];
        };
        registerCollection<funAArgs_Model>(funAArgs_Collection, funAArgs_fullname);
        const funARes_fullname = 'tstdox.MyIfaceA.funARes';
        export interface funARes {
            c: MyStructA;
            d: number;
        }
        export interface funARes_ModelParam {
            c: MyStructA_ModelParam | MyStructA_Model;
            d: number;
        }
        export class funARes_Model extends StructModel<funARes_ModelParam> {
            public c: MyStructA_Model;
            public d: number;
            public icQuery: (rpc: never) => never;
        };
        registerModel(funARes_Model, funARes_fullname);
        export class funARes_Collection extends IopCollection<funARes_Model> {
            public icQuery: funARes_Model['icQuery'];
        };
        registerCollection<funARes_Model>(funARes_Collection, funARes_fullname);
        export type funAExn = MyStructAc;
        export type funAExn_ModelParam = MyStructAc_ModelParam;
        export type funAIcQuery = (
            rpc: 'funA',
            args: funAArgs | funAArgs_ModelParam,
            options?: Backbone.ICQueryOptions
        ) => JQueryDeferred<funARes>;

        const funAaArgs_fullname = 'tstdox.MyIfaceA.funAaArgs';
        export interface funAaArgs {
            a: number;
        }
        export interface funAaArgs_ModelParam {
            a: number;
        }
        export class funAaArgs_Model extends StructModel<funAaArgs_ModelParam> {
            public a: number;
            public icQuery: (rpc: never) => never;
        };
        registerModel(funAaArgs_Model, funAaArgs_fullname);
        export class funAaArgs_Collection extends IopCollection<funAaArgs_Model> {
            public icQuery: funAaArgs_Model['icQuery'];
        };
        registerCollection<funAaArgs_Model>(funAaArgs_Collection, funAaArgs_fullname);
        const funAaRes_fullname = 'tstdox.MyIfaceA.funAaRes';
        export interface funAaRes {
            b: number;
        }
        export interface funAaRes_ModelParam {
            b: number;
        }
        export class funAaRes_Model extends StructModel<funAaRes_ModelParam> {
            public b: number;
            public icQuery: (rpc: never) => never;
        };
        registerModel(funAaRes_Model, funAaRes_fullname);
        export class funAaRes_Collection extends IopCollection<funAaRes_Model> {
            public icQuery: funAaRes_Model['icQuery'];
        };
        registerCollection<funAaRes_Model>(funAaRes_Collection, funAaRes_fullname);
        export type funAaExn = void;
        export type funAaIcQuery = (
            rpc: 'funAa',
            args: funAaArgs | funAaArgs_ModelParam,
            options?: Backbone.ICQueryOptions
        ) => JQueryDeferred<funAaRes>;

        const funBArgs_fullname = 'tstdox.MyIfaceA.funBArgs';
        export interface funBArgs {
            a: number;
        }
        export interface funBArgs_ModelParam {
            a: number;
        }
        export class funBArgs_Model extends StructModel<funBArgs_ModelParam> {
            public a: number;
            public icQuery: (rpc: never) => never;
        };
        registerModel(funBArgs_Model, funBArgs_fullname);
        export class funBArgs_Collection extends IopCollection<funBArgs_Model> {
            public icQuery: funBArgs_Model['icQuery'];
        };
        registerCollection<funBArgs_Model>(funBArgs_Collection, funBArgs_fullname);
        export type funBRes = MyStructA;
        export type funBRes_ModelParam = MyStructA_ModelParam;
        export type funBExn = void;
        export type funBIcQuery = (
            rpc: 'funB',
            args: funBArgs | funBArgs_ModelParam,
            options?: Backbone.ICQueryOptions
        ) => JQueryDeferred<funBRes>;

        export type funCArgs = MyStructA;
        export type funCArgs_ModelParam = MyStructA_ModelParam;
        const funCRes_fullname = 'tstdox.MyIfaceA.funCRes';
        export interface funCRes {
            b: number;
        }
        export interface funCRes_ModelParam {
            b: number;
        }
        export class funCRes_Model extends StructModel<funCRes_ModelParam> {
            public b: number;
            public icQuery: (rpc: never) => never;
        };
        registerModel(funCRes_Model, funCRes_fullname);
        export class funCRes_Collection extends IopCollection<funCRes_Model> {
            public icQuery: funCRes_Model['icQuery'];
        };
        registerCollection<funCRes_Model>(funCRes_Collection, funCRes_fullname);
        export type funCExn = void;
        export type funCIcQuery = (
            rpc: 'funC',
            args: funCArgs | funCArgs_ModelParam,
            options?: Backbone.ICQueryOptions
        ) => JQueryDeferred<funCRes>;

        export type funDArgs = void;
        const funDRes_fullname = 'tstdox.MyIfaceA.funDRes';
        export interface funDRes {
            b: number;
        }
        export interface funDRes_ModelParam {
            b: number;
        }
        export class funDRes_Model extends StructModel<funDRes_ModelParam> {
            public b: number;
            public icQuery: (rpc: never) => never;
        };
        registerModel(funDRes_Model, funDRes_fullname);
        export class funDRes_Collection extends IopCollection<funDRes_Model> {
            public icQuery: funDRes_Model['icQuery'];
        };
        registerCollection<funDRes_Model>(funDRes_Collection, funDRes_fullname);
        export type funDExn = void;
        export type funDIcQuery = (
            rpc: 'funD',
            args: funDArgs,
            options?: Backbone.ICQueryOptions
        ) => JQueryDeferred<funDRes>;

        const funEArgs_fullname = 'tstdox.MyIfaceA.funEArgs';
        export interface funEArgs {
            a: number;
        }
        export interface funEArgs_ModelParam {
            a: number;
        }
        export class funEArgs_Model extends StructModel<funEArgs_ModelParam> {
            public a: number;
            public icQuery: (rpc: never) => never;
        };
        registerModel(funEArgs_Model, funEArgs_fullname);
        export class funEArgs_Collection extends IopCollection<funEArgs_Model> {
            public icQuery: funEArgs_Model['icQuery'];
        };
        registerCollection<funEArgs_Model>(funEArgs_Collection, funEArgs_fullname);
        export type funERes = void;
        export type funEExn = void;
        export type funEIcQuery = (
            rpc: 'funE',
            args: funEArgs | funEArgs_ModelParam,
            options?: Backbone.ICQueryOptions
        ) => JQueryDeferred<funERes>;

        export type IcQuery = funAIcQuery
            & funAaIcQuery
            & funBIcQuery
            & funCIcQuery
            & funDIcQuery
            & funEIcQuery;
    }
    export namespace MyIfaceB {
        const funAArgs_fullname = 'tstdox.MyIfaceB.funAArgs';
        export interface funAArgs {
            i: number;
        }
        export interface funAArgs_ModelParam {
            i: number;
        }
        export class funAArgs_Model extends StructModel<funAArgs_ModelParam> {
            public i: number;
            public icQuery: (rpc: never) => never;
        };
        registerModel(funAArgs_Model, funAArgs_fullname);
        export class funAArgs_Collection extends IopCollection<funAArgs_Model> {
            public icQuery: funAArgs_Model['icQuery'];
        };
        registerCollection<funAArgs_Model>(funAArgs_Collection, funAArgs_fullname);
        export type funARes = void;
        export type funAExn = void;
        export type funAIcQuery = (
            rpc: 'funA',
            args: funAArgs | funAArgs_ModelParam,
            options?: Backbone.ICQueryOptions
        ) => JQueryDeferred<funARes>;

        const funBArgs_fullname = 'tstdox.MyIfaceB.funBArgs';
        export interface funBArgs {
            j: number;
        }
        export interface funBArgs_ModelParam {
            j: number;
        }
        export class funBArgs_Model extends StructModel<funBArgs_ModelParam> {
            public j: number;
            public icQuery: (rpc: never) => never;
        };
        registerModel(funBArgs_Model, funBArgs_fullname);
        export class funBArgs_Collection extends IopCollection<funBArgs_Model> {
            public icQuery: funBArgs_Model['icQuery'];
        };
        registerCollection<funBArgs_Model>(funBArgs_Collection, funBArgs_fullname);
        export type funBRes = void;
        export type funBExn = void;
        export type funBIcQuery = (
            rpc: 'funB',
            args: funBArgs | funBArgs_ModelParam,
            options?: Backbone.ICQueryOptions
        ) => JQueryDeferred<funBRes>;

        export type IcQuery = funAIcQuery
            & funBIcQuery;
    }
    export namespace MyIfaceC {
        const funAArgs_fullname = 'tstdox.MyIfaceC.funAArgs';
        export interface funAArgs {
            i: number;
        }
        export interface funAArgs_ModelParam {
            i: number;
        }
        export class funAArgs_Model extends StructModel<funAArgs_ModelParam> {
            public i: number;
            public icQuery: (rpc: never) => never;
        };
        registerModel(funAArgs_Model, funAArgs_fullname);
        export class funAArgs_Collection extends IopCollection<funAArgs_Model> {
            public icQuery: funAArgs_Model['icQuery'];
        };
        registerCollection<funAArgs_Model>(funAArgs_Collection, funAArgs_fullname);
        export type funARes = void;
        export type funAExn = void;
        export type funAIcQuery = (
            rpc: 'funA',
            args: funAArgs | funAArgs_ModelParam,
            options?: Backbone.ICQueryOptions
        ) => JQueryDeferred<funARes>;

        const funBArgs_fullname = 'tstdox.MyIfaceC.funBArgs';
        export interface funBArgs {
            j: number;
        }
        export interface funBArgs_ModelParam {
            j: number;
        }
        export class funBArgs_Model extends StructModel<funBArgs_ModelParam> {
            public j: number;
            public icQuery: (rpc: never) => never;
        };
        registerModel(funBArgs_Model, funBArgs_fullname);
        export class funBArgs_Collection extends IopCollection<funBArgs_Model> {
            public icQuery: funBArgs_Model['icQuery'];
        };
        registerCollection<funBArgs_Model>(funBArgs_Collection, funBArgs_fullname);
        export type funBRes = void;
        export type funBExn = void;
        export type funBIcQuery = (
            rpc: 'funB',
            args: funBArgs | funBArgs_ModelParam,
            options?: Backbone.ICQueryOptions
        ) => JQueryDeferred<funBRes>;

        export type IcQuery = funAIcQuery
            & funBIcQuery;
    }
    export namespace MyIfaceD {
        const funAArgs_fullname = 'tstdox.MyIfaceD.funAArgs';
        export interface funAArgs {
            i: number;
        }
        export interface funAArgs_ModelParam {
            i: number;
        }
        export class funAArgs_Model extends StructModel<funAArgs_ModelParam> {
            public i: number;
            public icQuery: (rpc: never) => never;
        };
        registerModel(funAArgs_Model, funAArgs_fullname);
        export class funAArgs_Collection extends IopCollection<funAArgs_Model> {
            public icQuery: funAArgs_Model['icQuery'];
        };
        registerCollection<funAArgs_Model>(funAArgs_Collection, funAArgs_fullname);
        export type funARes = void;
        export type funAExn = void;
        export type funAIcQuery = (
            rpc: 'funA',
            args: funAArgs | funAArgs_ModelParam,
            options?: Backbone.ICQueryOptions
        ) => JQueryDeferred<funARes>;

        const funBArgs_fullname = 'tstdox.MyIfaceD.funBArgs';
        export interface funBArgs {
            j: number;
        }
        export interface funBArgs_ModelParam {
            j: number;
        }
        export class funBArgs_Model extends StructModel<funBArgs_ModelParam> {
            public j: number;
            public icQuery: (rpc: never) => never;
        };
        registerModel(funBArgs_Model, funBArgs_fullname);
        export class funBArgs_Collection extends IopCollection<funBArgs_Model> {
            public icQuery: funBArgs_Model['icQuery'];
        };
        registerCollection<funBArgs_Model>(funBArgs_Collection, funBArgs_fullname);
        export type funBRes = void;
        export type funBExn = void;
        export type funBIcQuery = (
            rpc: 'funB',
            args: funBArgs | funBArgs_ModelParam,
            options?: Backbone.ICQueryOptions
        ) => JQueryDeferred<funBRes>;

        export type IcQuery = funAIcQuery
            & funBIcQuery;
    }
}
