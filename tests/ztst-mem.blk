/***************************************************************************/
/*                                                                         */
/* Copyright 2020 INTERSEC SA                                              */
/*                                                                         */
/* Licensed under the Apache License, Version 2.0 (the "License");         */
/* you may not use this file except in compliance with the License.        */
/* You may obtain a copy of the License at                                 */
/*                                                                         */
/*     http://www.apache.org/licenses/LICENSE-2.0                          */
/*                                                                         */
/* Unless required by applicable law or agreed to in writing, software     */
/* distributed under the License is distributed on an "AS IS" BASIS,       */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.*/
/* See the License for the specific language governing permissions and     */
/* limitations under the License.                                          */
/*                                                                         */
/***************************************************************************/

#include <lib-common/core.h>
#include <lib-common/el.h>
#include <lib-common/log.h>
#include <lib-common/parseopt.h>
#include <lib-common/thr.h>
#include <lib-common/unix.h>

/** Small utility to check the behavior of our allocators on the "long term".
 *
 * This program allows simulating the behavior of various allocators (libc,
 * stack, ring) in a real program with an event loop. Stress tests can be run
 * independently for each memory pool.
 *
 * This utility launches runs for each allocator in crons. Each run allocates
 * memory on the related pool from different treads, and releases it either
 * immedialely (from the thread it was allocated on of from the main thread)
 * or later.
 *
 * Once a termination signal is received, no more runs are launched. This
 * allows observing the state of the memory after the bench.
 */

static struct {
    logger_t logger;
    el_t     blocker;

    /* Libc. */
    logger_t libc_logger;
    el_t     libc_cron;

    /* Stack. */
    logger_t stack_logger;
    el_t     stack_cron;

    /* Ring. */
    logger_t    ring_logger;
    el_t        ring_cron;
    mem_pool_t *ring_pool;

    /* Command-line options. */
    bool opt_help;
    bool opt_monothread;
    bool opt_libc;
    bool opt_stack;
    bool opt_ring;
} ztst_mem_g = {
#define _G  ztst_mem_g
    .logger       = LOGGER_INIT_INHERITS(NULL, "ztst-mem"),
    .libc_logger  = LOGGER_INIT_INHERITS(&_G.logger, "libc"),
    .stack_logger = LOGGER_INIT_INHERITS(&_G.logger, "stack"),
    .ring_logger  = LOGGER_INIT_INHERITS(&_G.logger, "ring"),
};

/* {{{ common */

static byte *mp_ztst_alloc(mem_pool_t *mp, size_t size)
{
    byte *res = mp_new(mp, byte, size);

    memset(res, 1, size);
    return res;
}

typedef enum free_policy_t {
    FREE_POLICY_MAIN_QUEUE,
    FREE_POLICY_NOW,
    FREE_POLICY_LATER,
} free_policy_t;

static free_policy_t pick_free_policy(void)
{
    if (thr_is_on_queue(thr_queue_main_g)) {
        return rand_range(FREE_POLICY_NOW, FREE_POLICY_LATER);
    } else {
        return rand_range(FREE_POLICY_MAIN_QUEUE, FREE_POLICY_NOW);
    }
}

/* }}} */
/* {{{ libc */

static void
ztst_libc_free(int run_id, byte **alloc_vec, int nb_alloc, bool do_log)
{
    if (do_log) {
        logger_notice(&_G.libc_logger, "run #%d: deallocate vec %p",
                      run_id, alloc_vec);
    }
    for (int i = 0; i < nb_alloc; i++) {
        p_delete(&alloc_vec[i]);
    }
    p_delete(&alloc_vec);
}

static void ztst_libc_run(int run_id)
{
    logger_notice_scope(&_G.libc_logger);
    size_t total_size = 0;
    int nb_alloc = rand_range(1, 10000);
    byte **alloc_vec = p_new(byte *, nb_alloc);

    logger_cont("run #%d: ", run_id);

    /* Allocate. */
    for (int i = 0; i < nb_alloc; i++) {
        size_t size = rand_range(1000, 100000);

        alloc_vec[i] = mp_ztst_alloc(NULL, size);
        total_size += size;
    }
    logger_cont("%d allocations done in vec %p from thread #%jd (total size "
                "%jd bytes), ", nb_alloc, alloc_vec, thr_id(), total_size);

    /* Deallocate. */
    switch (pick_free_policy()) {
      case FREE_POLICY_MAIN_QUEUE:
        logger_cont("free in main queue");
        thr_queue_b(thr_queue_main_g, ^{
            ztst_libc_free(run_id, alloc_vec, nb_alloc, true);
        });
        break;

      case FREE_POLICY_NOW:
        logger_cont("free now");
        ztst_libc_free(run_id, alloc_vec, nb_alloc, false);
        break;

      case FREE_POLICY_LATER: {
        int when = rand_range(1, 10);

        logger_cont("free in %d seconds", when);
        el_timer_register_blk(when * 1000, 0, 0, ^(el_t ev){
            ztst_libc_free(run_id, alloc_vec, nb_alloc, true);
        }, NULL);
      } break;
    }
}

static int ztst_libc_initialize(void *arg)
{
    _G.libc_cron = el_timer_register_blk(0, 5000, 0, ^(el_t ev){
        static int run_id = 0;
        __block int _run_id = ++run_id;

        ztst_libc_run(_run_id);

        if (_G.opt_monothread) {
            for (int i = 0; i < 10; i++) {
                ztst_libc_run(_run_id);
            }
        } else {
            thr_for_each(10, ^(size_t pos) {
                ztst_libc_run(_run_id);
            });
        }
    }, NULL);
    return 0;
}

static void ztst_libc_on_term(int signo)
{
    el_unregister(&_G.libc_cron);
}

static int ztst_libc_shutdown(void)
{
    return 0;
}

static MODULE_BEGIN(ztst_libc)
    MODULE_IMPLEMENTS_INT(on_term, &ztst_libc_on_term);
MODULE_END()

/* }}} */
/* {{{ stack */

static void
__ztst_stack_run(int nb_frames, int *total_nb_alloc, size_t *total_size)
{
    t_scope;
    int nb_alloc = rand_range(1, 1000);

    for (int i = 0; i < nb_alloc; i++) {
        size_t size = rand_range(100, 100000);

        mp_ztst_alloc(t_pool(), size);
        *total_size += size;
    }
    *total_nb_alloc += nb_alloc;

    if (--nb_frames) {
        __ztst_stack_run(nb_frames, total_nb_alloc, total_size);
    }
}

static void ztst_stack_run(int run_id)
{
    int nb_frames = rand_range(1, 15);
    int total_nb_allocs = 0;
    size_t total_size = 0;

    __ztst_stack_run(nb_frames, &total_nb_allocs, &total_size);

    logger_notice(&_G.stack_logger, "run #%d: %d allocations done in %d "
                  "frames from thread #%jd (total size %jd bytes)",
                  run_id, total_nb_allocs, nb_frames, thr_id(), total_size);
}

static int ztst_stack_initialize(void *arg)
{
    _G.stack_cron = el_timer_register_blk(1000, 5000, 0, ^(el_t ev){
        static int run_id = 0;
        __block int _run_id = ++run_id;

        ztst_stack_run(_run_id);

        if (_G.opt_monothread) {
            for (int i = 0; i < 10; i++) {
                ztst_stack_run(_run_id);
            }
        } else {
            thr_for_each(10, ^(size_t pos) {
                ztst_stack_run(_run_id);
            });
        }
    }, NULL);
    return 0;
}

static void ztst_stack_on_term(int signo)
{
    el_unregister(&_G.stack_cron);
}

static int ztst_stack_shutdown(void)
{
    return 0;
}

static MODULE_BEGIN(ztst_stack)
    MODULE_IMPLEMENTS_INT(on_term, &ztst_stack_on_term);
MODULE_END()

/* }}} */
/* {{{ ring */

static void ztst_ring_free(int run_id, const void *frame, bool do_log)
{
    if (do_log) {
        logger_notice(&_G.ring_logger, "run #%d: deallocate frame %p",
                      run_id, frame);
    }
    mem_ring_release(frame);
}

static void ztst_ring_run(int run_id)
{
    logger_notice_scope(&_G.ring_logger);
    size_t total_size = 0;
    int nb_alloc = rand_range(1, 10000);
    const void *frame;

    logger_cont("run #%d: ", run_id);

    /* Create frame. */
    frame = mem_ring_newframe(_G.ring_pool);

    /* Allocate. */
    for (int i = 0; i < nb_alloc; i++) {
        size_t size = rand_range(1000, 100000);

        mp_ztst_alloc(_G.ring_pool, size);
        total_size += size;
    }
    mem_ring_seal(_G.ring_pool);
    logger_cont("%d allocations done in frame %p from thread #%jd "
                "(total size %jd bytes), ",
                nb_alloc, frame, thr_id(), total_size);

    /* Deallocate. */
    switch (pick_free_policy()) {
      case FREE_POLICY_MAIN_QUEUE:
        logger_cont("free in main queue");
        thr_queue_b(thr_queue_main_g, ^{
            ztst_ring_free(run_id, frame, true);
        });
        break;

      case FREE_POLICY_NOW:
        logger_cont("free now");
        ztst_ring_free(run_id, frame, false);
        break;

      case FREE_POLICY_LATER: {
        int when = rand_range(1, 10);

        logger_cont("free in %d seconds", when);
        el_timer_register_blk(when * 1000, 0, 0, ^(el_t ev){
            ztst_ring_free(run_id, frame, true);
        }, NULL);
      } break;
    }
}

static int ztst_ring_initialize(void *arg)
{
    _G.ring_pool = mem_ring_new("ztst-ring", 64 << 10);

    _G.ring_cron = el_timer_register_blk(2000, 5000, 0, ^(el_t ev){
        static int run_id = 0;
        __block int _run_id = ++run_id;

        ztst_ring_run(_run_id);

        if (_G.opt_monothread) {
            for (int i = 0; i < 10; i++) {
                ztst_ring_run(_run_id);
            }
        } else {
            thr_queue_t *queue = thr_queue_create();

            for (int i = 0; i < 10; i++) {
                thr_queue_b(queue, ^{
                    ztst_ring_run(_run_id);
                });
            }
            thr_queue_b(queue, ^{
                thr_queue_destroy(queue, false);
            });
        }

    }, NULL);

    return 0;
}

static void ztst_ring_on_term(int signo)
{
    el_unregister(&_G.ring_cron);
}

static int ztst_ring_shutdown(void)
{
    /* XXX: ring pool destroyed in on_term. */
    return 0;
}

static MODULE_BEGIN(ztst_ring)
    MODULE_IMPLEMENTS_INT(on_term, &ztst_ring_on_term);
MODULE_END()

/* }}} */

static void on_term(el_t ev, int signo, el_data_t arg)
{
    static int nb_calls = 0;

    switch (++nb_calls) {
      case 1: {
        logger_notice_scope(&_G.logger);

        logger_cont("unregister mem stress-tests, send a new signal to ");
        module_on_term(signo);

        if (_G.ring_pool) {
            logger_cont("destroy the memory pools");
        } else {
            logger_cont("stop the program");
            nb_calls++;
        }
      } break;

      case 2:
        logger_notice(&_G.logger, "destroy memory pools");
        mem_ring_delete(&_G.ring_pool);
        break;

      case 3:
        el_unregister(&_G.blocker);
        break;
    }
}

static popt_t popts_g[] = {
    OPT_FLAG('h', "help", &_G.opt_help, "show this help"),
    OPT_FLAG('m', "monothread", &_G.opt_monothread,  "run monothread tests"),
    OPT_FLAG('l', "libc",  &_G.opt_libc,  "run libc stress-test"),
    OPT_FLAG('s', "stack", &_G.opt_stack, "run stack pool stress-test"),
    OPT_FLAG('r', "ring",  &_G.opt_ring,  "run ring pool stress-test"),
    OPT_END(),
};

int main(int argc, char **argv)
{
    const char *arg0 = NEXTARG(argc, argv);
    struct sigaction sa = {
        .sa_flags   = SA_RESTART,
        .sa_handler = SIG_IGN,
    };

    ps_install_panic_sighandlers();

    argc = parseopt(argc, argv, popts_g, 0);
    if (argc != 0 || _G.opt_help
    ||  (!_G.opt_libc && !_G.opt_stack && !_G.opt_ring))
    {
        makeusage(0, arg0, "", NULL, popts_g);
    }

    /* Setup sighandlers. */
    sigaction(SIGHUP,  &sa, NULL);
    sigaction(SIGUSR1, &sa, NULL);
    sigaction(SIGPIPE, &sa, NULL);
    sigaction(SIGALRM, &sa, NULL);

    el_signal_register(SIGTERM, on_term, NULL);
    el_signal_register(SIGINT,  on_term, NULL);
    el_signal_register(SIGQUIT, on_term, NULL);

    /* Run stress-tests. */
    MODULE_REQUIRE(core_mem);
    if (!_G.opt_monothread) {
        MODULE_REQUIRE(thr);
    }
    if (_G.opt_libc) {
        MODULE_REQUIRE(ztst_libc);
    }
    if (_G.opt_stack) {
        MODULE_REQUIRE(ztst_stack);
    }
    if (_G.opt_ring) {
        MODULE_REQUIRE(ztst_ring);
    }

    /* Run event loop. */
    _G.blocker = el_blocker_register();
    el_loop();

    /* Shutdown. */
    if (_G.opt_libc) {
        MODULE_RELEASE(ztst_libc);
    }
    if (_G.opt_stack) {
        MODULE_RELEASE(ztst_stack);
    }
    if (_G.opt_ring) {
        MODULE_RELEASE(ztst_ring);
    }
    if (!_G.opt_monothread) {
        MODULE_RELEASE(thr);
    }
    MODULE_RELEASE(core_mem);

    return 0;
}
