###########################################################################
#                                                                         #
# Copyright 2022 INTERSEC SA                                              #
#                                                                         #
# Licensed under the Apache License, Version 2.0 (the "License");         #
# you may not use this file except in compliance with the License.        #
# You may obtain a copy of the License at                                 #
#                                                                         #
#     http://www.apache.org/licenses/LICENSE-2.0                          #
#                                                                         #
# Unless required by applicable law or agreed to in writing, software     #
# distributed under the License is distributed on an "AS IS" BASIS,       #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.#
# See the License for the specific language governing permissions and     #
# limitations under the License.                                          #
#                                                                         #
###########################################################################

# XXX: Read README-python3.adoc before adding new packages here.

[project]
name = "lib-common"
version = "0.0.0"
description = ""
authors = [{ name = "R&D", email = "rd@intersec.com" }]
requires-python = "~=3.9"

[dependency-groups]
dev = [
    # C extension writer for Python, used by IOPy
    "cython~=3.0.0",

    # process handling, used in tests
    "psutil~=5.9.5",
    "types-psutil~=5.9.5",

    # python linter
    "pylint==3.3.4",
    "ruff==0.11.9",

    # static typing for Python
    "mypy==1.14.1",
]

# {{{ Ruff linter

[tool.ruff]

line-length = 78
target-version = "py39"
builtins = ["_iop_registry"]

[tool.ruff.lint]

select = [
    "F",    # pyflakes (runtime errors, unused imports, etc.)
    "E",    # pycodestyle - errors
    "W",    # pycodestyle - warnings
    "I",    # isort (import sorting)
    "PL",   # pylint
    "RUF"   # Ruff-specific
]

# Enable Pylint rules + some essential Ruff defaults
extend-select = [

    # Rules mark as PREVIEW are unstable.
    # The --preview flag is required for use. (not activated by default)

    # flake
    "A",      # flake8-builtins
    "ASYNC",  # flake8-async
    "B",      # flake8-bugbear (common bugs)
    "BLE",    # flake8-blind-except
    "C4",     # flake8-comprehensions
    "COM",    # flake8-commas
    "CPY",    # flake8-copyright - PREVIEW
    "DJ",     # flake8-django
    "DTZ",    # flake8-datetimez
    "EXE",    # flake8-executable
    "FA",     # flake8-future-annotations
    "ISC",    # flake8-implicit-str-concat
    "INP",    # flake8-no-pep420
    "INT",    # flake8-gettext
    "PYI",    # flake8-pyi
    "Q",      # flake8-quotes
    "RET",    # flake8-return
    "RSE",    # flake8-raise
    "S",      # flake8-bandit
    "SIM",    # flake8-simplify
    "SLOT",   # flake8-slots
    "T10",    # flake8-debugger
    "T20",    # flake8-print
    "YTT",    # flake8-2020
    "PIE",    # flake8-pie
    "G",      # flake8-logging-format

    # Others
    "AIR",    # Airflow
    "D",      # pydocstyle (formatting errors)
    "DOC",    # pydoclint - PREVIEW
    "FAST",   # fastAPI
    "FLY",    # flynt
    "FURB",   # refurb
    "N",      # pep8-naming
    "NPY",    # numPy-specific rules
    "PD",     # pandas-vet
    "PERF",   # perflint
    "TRY",    # tryceratops
    "UP",     # pyupgrade (modernize syntax)
]

# Ignore specific rules you find too noisy or don't need
ignore = [
    # Rules in PREVIEW are unstable, --preview flag is required for use.

    # PLR - pylint - refactor
    "PLR0904",  # too-many-public-methods => lint.pylint.max-public-methods - PREVIEW
    "PLR0911",  # too-many-return-statements => lint.pylint.max-returns
    "PLR0912",  # too-many-branches => lint.pylint.max-branches
    "PLR0913",  # too-many-arguments => lint.pylint.max-args
    "PLR0914",  # too-many-locals => lint.pylint.max-locals - PREVIEW
    "PLR0915",  # too-many-statements => lint.pylint.max-statements
    "PLR0916",  # too-many-boolean-expressions => lint.pylint.max-bool-expr - PREVIEW
    "PLR1702",  # too-many-nested-blocks => lint.pylint.max-nested-blocks - PREVIEW
    "PLR2004",  # magic-value-comparison

    # PLW - pylint- warning
    "PLW0603",  # global-statement
    "PLW1514",  # unspecified-encoding - PREVIEW

    # PLC - pylint - convention
    "PLC1901", # compare-to-empty-string - PREVIEW

    # PLE - pylint - error
    "PLE1205",  # too-few-public-methods

    # ARG - flake8-unused-arguments
    "ARG001",   # unused-argument

    # B - flake8-bugbear
    "B026",     # star-arg-unpacking-after-keyword-arg

    # D - pydocstyle - error
    "D100",     # undocumented-public-module
    "D101",     # undocumented-public-class
    "D102",     # undocumented-public-method
    "D103",     # undocumented-public-function
    "D104",     # undocumented-public-package
    "D105",     # undocumented-magic-method
    "D106",     # undocumented-public-nested-class
    "D107",     # undocumented-public-init
    "D212",     # multi-line-summary-first-line

    # E - pycodestyle - error
    "E731",     # lambda-assignment

    # RET - flake8-return
    "RET501",   # unnecessary-return-none

    # SIM - flake8-simplify
    "SIM105",   # suppressible-exception
    "SIM108",   # if-else-block-instead-of-if-exp

    # UP - pyupgrade
    "UP015",    # redundant-open-modes
]

# Only ignore variables named "_".
dummy-variable-rgx = "_"

# Optional: extend for specific files or folders
[tool.ruff.lint.extend-per-file-ignores]
"**/__init__.py" = ["F401"]  # unused-import
"**/wscript_build" = ["F821"]  # undefined-name

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

# }}}
