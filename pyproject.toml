###########################################################################
#                                                                         #
# Copyright 2025 INTERSEC SA                                              #
#                                                                         #
# Licensed under the Apache License, Version 2.0 (the "License");         #
# you may not use this file except in compliance with the License.        #
# You may obtain a copy of the License at                                 #
#                                                                         #
#     http://www.apache.org/licenses/LICENSE-2.0                          #
#                                                                         #
# Unless required by applicable law or agreed to in writing, software     #
# distributed under the License is distributed on an "AS IS" BASIS,       #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.#
# See the License for the specific language governing permissions and     #
# limitations under the License.                                          #
#                                                                         #
###########################################################################

# XXX: Read README-python3.adoc before adding new packages here.

[project]
name = "lib-common"
version = "0.0.0"
description = ""
authors = [{ name = "R&D", email = "rd@intersec.com" }]
requires-python = "~=3.9"

[dependency-groups]
dev = [
    # C extension writer for Python, used by IOPy
    "cython~=3.0.0",

    # process handling, used in tests
    "psutil~=5.9.5",
    "types-psutil~=5.9.5",

    # python linter
    "ruff==0.11.9",

    # static typing for Python
    "mypy==1.14.1",
]

# {{{ Ruff linter

[tool.ruff]

line-length = 78
target-version = "py39"
builtins = ["_iop_registry"]
extend-include = ["**/wscript", "**/wscript_build"]

[tool.ruff.lint]
# Enable experimental preview rules
preview = true

# Select all rules
select = ["ALL"]

# Ignore specific rules you find too noisy or don't need
ignore = [
    # List of rules completely ignored
    "ANN",    # flake8-annotations
    "ARG",    # flake8-unused-arguments
    "DTZ",    # flake8-datetimez
    "EM",     # flake8-errmsg
    "FBT",    # flake8-boolean-trap
    "FIX",    # flake8-fixme
    "ICN",    # flake8-import-conventions
    "INP",    # flake8-no-pep420
    "PT",     # flake8-pytest-style
    "PTH",    # flake8-use-pathlib
    "T20",    # flake8-print
    "TC",     # flake8-type-checking
    "TD",     # flake8-todos
    "TID",    # flake8-tidy-imports

    "C90",    # mccabe
    "ERA",    # eradicate
    "DOC",    # pydoclint

    # List of rules partialy ignored

    # PLR - pylint - refactor
    "PLR0904",  # too-many-public-methods => lint.pylint.max-public-methods
    "PLR0911",  # too-many-return-statements => lint.pylint.max-returns
    "PLR0912",  # too-many-branches => lint.pylint.max-branches
    "PLR0913",  # too-many-arguments => lint.pylint.max-args
    "PLR0914",  # too-many-locals => lint.pylint.max-locals
    "PLR0915",  # too-many-statements => lint.pylint.max-statements
    "PLR0916",  # too-many-boolean-expressions => lint.pylint.max-bool-expr
    "PLR0917",  # too-many-positional-arguments => lint.pylint.max-positional-args
    "PLR1702",  # too-many-nested-blocks => lint.pylint.max-nested-blocks
    "PLR2004",  # magic-value-comparison

    # PLW - pylint- warning
    "PLW0603",  # global-statement
    "PLW1514",  # unspecified-encoding

    # PLC - pylint - convention
    "PLC1901", # compare-to-empty-string

    # PLE - pylint - error
    "PLE1205",  # too-few-public-methods

    # ARG - flake8-unused-arguments
    "ARG001",   # unused-argument

    # B - flake8-bugbear
    "B026",     # star-arg-unpacking-after-keyword-arg

    # D - pydocstyle - error
    "D100",     # undocumented-public-module
    "D101",     # undocumented-public-class
    "D102",     # undocumented-public-method
    "D103",     # undocumented-public-function
    "D104",     # undocumented-public-package
    "D105",     # undocumented-magic-method
    "D106",     # undocumented-public-nested-class
    "D107",     # undocumented-public-init
    "D200",     # unnecessary-multiline-docstring
    "D203",     # incorrect-blank-line-before-class
    "D205",     # missing-blank-line-after-summary
    "D212",     # multi-line-summary-first-line
    "D400",     # missing-trailing-period
    "D401",     # non-imperative-mood
    "D404",     # docstring-starts-with-this
    "D415",     # missing-terminal-punctuation

    # E - pycodestyle - error
    "E731",     # lambda-assignment

    # RET - flake8-return
    "RET501",   # unnecessary-return-none

    # RUF - ruff-specific
    "RUF005",   # collection-literal-concatenation

    # S - flake8-bandit
    "S101",     # assert
    "S105",     # hardcoded-password-string
    "S106",     # hardcoded-password-func-arg
    "S404",     # suspicious-subprocess-import
    "S603",     # subprocess-without-shell-equals-true
    "S604",     # call-with-shell-equals-true
    "S607",     # start-process-with-partial-path

    # SIM - flake8-simplify
    "SIM105",   # suppressible-exception
    "SIM108",   # if-else-block-instead-of-if-exp

    # TRY - tryceratops
    "TRY003",   # raise-vanilla-args
    "TRY300",   # try-consider-else

    # UP - pyupgrade
    "UP015",    # redundant-open-modes

    # FURB - refurb
    "FURB101",  # read-whole-file
    "FURB103",  # write-whole-file
]

# Only ignore variables named "_".
dummy-variable-rgx = "^_$"

# Optional: extend for specific files or folders
[tool.ruff.lint.extend-per-file-ignores]
"**/__init__.py" = ["F401"]  # unused-import
"**/wscript_build" = ["F821"]  # undefined-name

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

# }}}
